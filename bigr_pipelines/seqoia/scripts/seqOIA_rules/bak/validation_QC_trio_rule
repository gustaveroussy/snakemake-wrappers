rule validation_QC_trio:
	input:
		qc = "{basedir}/{analysis}/{analysis}_qc_lab_temp.csv",
	output:
		flag = "{basedir}/{analysis}/{analysis}_qc_validation.done"
	params:
		genome_15x = config["QC_VALIDATION"]["OPTIONS"]["GENOME_15x"],
		callability = config["QC_VALIDATION"]["OPTIONS"]["CALLABILITY"],
		base_q30 = config["QC_VALIDATION"]["OPTIONS"]["Q30"],
		mean_cov = config["QC_VALIDATION"]["OPTIONS"]["MEAN_COV"],
		nb_sample = config["general_informations"]["SAMPLES"]
	log:
		"{basedir}/{analysis}/log/{analysis}_qc_validation.log"
	run:
		samples = int(len(params.nb_sample))
		genome_15 = int(params.genome_15x)
		callability = int(params.callability)
		Q30 = int(params.base_q30)
		mean_cov = int(params.mean_cov)
		pass_fail = []
		with open(input.qc, "r") as f:
			data = f.readlines()
			k = 4
			print("{basedir} :", data[k].split(",")[0])
			for x in range(samples):
				i = k + x
				print("k :", i)
				print(data[i])
				if float(data[i].split(',')[2]) >= genome_15 and float(data[i].split(",")[3]) >= mean_cov and float(data[i].split(',')[4]) >= callability and float(data[i].split(',')[5]) >= Q30:
					pass_fail.append("pass")
				else:
					pass_fail.append("failed")
		print(pass_fail)
		Flag = True
		for k in pass_fail:
			if k != "pass":
				Flag = False
		shell("touch {output} 2>&1 | tee -a {log}")

