rule QC_cancer_wes:
	input:
		flagstat = lambda wildcards: expand("{basedir}/{analysis}/{prefix}/chr_{index}/{prefix}_chr_{index}_flagstat.txt", basedir=basedir,prefix=wildcards.prefix, index=index, analysis=wildcards.analysis),
		fastqc = lambda wildcards: expand("{basedir}/{analysis}/{sample}/{sample}_{mate}_001_fastqc/fastqc_data.txt", basedir=basedir, analysis = wildcards.analysis, sample=sample_ids, mate=mate),
		insert_size = lambda wildcards: expand("{basedir}/{analysis}/{prefix}/chr_{index}/{prefix}_chr_{index}_size_metrics.txt", basedir=basedir, prefix=wildcards.prefix, index = index, analysis=wildcards.analysis),
		gatk_doc = lambda wildcards: expand("{basedir}/{analysis}/{prefix}/chr_{index}/{prefix}_chr_{index}.wes.sample_summary", prefix=wildcards.prefix, index = autosome, basedir=basedir, analysis = wildcards.analysis),
		gatk_callable = lambda wildcards: expand("{basedir}/{analysis}/{prefix}/chr_{index}/{prefix}_chr_{index}_wes_callableloci.table.txt", prefix=wildcards.prefix, index = autosome, basedir=basedir, analysis = wildcards.analysis),
		picard_alignment = lambda wildcards: expand("{basedir}/{analysis}/{prefix}/chr_{index}/{prefix}_chr_{index}_collect_summary_metrics.txt", prefix=wildcards.prefix, index = index, basedir=basedir, analysis = wildcards.analysis),
		markdup = lambda wildcards: expand("{basedir}/{analysis}/{prefix}/chr_{index}/{prefix}_chr_{index}_metrics.txt", prefix=wildcards.prefix, index = index, basedir=basedir, analysis = wildcards.analysis),
		quality_yield = lambda wildcards: expand("{basedir}/{analysis}/{prefix}/chr_{index}/{prefix}_chr_{index}_collect_quality_yield_metrics.txt",basedir=basedir, analysis=wildcards.analysis, prefix=wildcards.prefix, index=index),
		targeted_pcr = lambda wildcards: expand("{basedir}/{analysis}/{prefix}/chr_{index}/{prefix}_chr_{index}_pcr_metrics.txt", basedir=basedir, analysis=wildcards.analysis, prefix=wildcards.prefix, index=index_wes),
		script_python = lambda wildcards: expand("{script_dir}/QC_cancer.py", script_dir = script_dir)
	params:
		bed = config["QC"]["BED"],
	output:
		"{basedir}/{analysis}/{prefix}/{prefix}_wes_qc_stat.csv"
	log:
		"{basedir}/{analysis}/log/log/{prefix}/{prefix}_qc.log"
	run:
		prefix_fastqc = []
		sample_regex=r""+ wildcards.prefix + "_(L\d_\d+)"
		
		with open(wildcards.basedir + "/" + wildcards.analysis + "/" + wildcards.prefix + "/flagstats.txt", "w+") as f:
			path = str(input.flagstat).replace("[","").replace("]","").replace(",","").replace("'","")
			f.write(path)
		
		for k in input.fastqc:
			if re.search(sample_regex, k):
				prefix_fastqc.append(k)
		prefix_fastqc = str(prefix_fastqc).replace("[","").replace("]","").replace(",","").replace("'","")
		with open(wildcards.basedir + "/" + wildcards.analysis + "/" + wildcards.prefix + "/fastqc.txt", "w+") as f:
                         f.write(prefix_fastqc)
		with open(wildcards.basedir + "/" + wildcards.analysis + "/" + wildcards.prefix + "/insert_size.txt", "w+") as f:
                        path = str(input.insert_size).replace("[","").replace("]","").replace(",","").replace("'","")
                        f.write(path)
		with open(wildcards.basedir + "/" + wildcards.analysis + "/" + wildcards.prefix + "/gatk_doc.txt", "w+") as f:
                        path = str(input.gatk_doc).replace("[","").replace("]","").replace(",","").replace("'","")
                        f.write(path)
		with open(wildcards.basedir + "/" + wildcards.analysis + "/" + wildcards.prefix + "/gatk_callable.txt", "w+") as f:
                        path = str(input.gatk_callable).replace("[","").replace("]","").replace(",","").replace("'","")
                        f.write(path)
		with open(wildcards.basedir + "/" + wildcards.analysis + "/" + wildcards.prefix + "/picard_alignment.txt", "w+") as f:
                        path = str(input.picard_alignment).replace("[","").replace("]","").replace(",","").replace("'","")
                        f.write(path)
		with open(wildcards.basedir + "/" + wildcards.analysis + "/" + wildcards.prefix + "/picard_markdup.txt", "w+") as f:
                        path = str(input.markdup).replace("[","").replace("]","").replace(",","").replace("'","")
                        f.write(path)
		with open(wildcards.basedir + "/" + wildcards.analysis + "/" + wildcards.prefix + "/quality_yield.txt", "w+") as f:
                        path = str(input.quality_yield).replace("[","").replace("]","").replace(",","").replace("'","")
                        f.write(path)
		with open(wildcards.basedir + "/" + wildcards.analysis + "/" + wildcards.prefix + "/targeted_pcr.txt", "w+") as f:
                        path = str(input.targeted_pcr).replace("[","").replace("]","").replace(",","").replace("'","")
                        f.write(path)
		cmd = "set -o pipefail; python3 {input.script_python} -doc {wildcards.basedir}/{wildcards.analysis}/{wildcards.prefix}/gatk_doc.txt -tp {wildcards.basedir}/{wildcards.analysis}/{wildcards.prefix}/targeted_pcr.txt -qy {wildcards.basedir}/{wildcards.analysis}/{wildcards.prefix}/quality_yield.txt -m {wildcards.basedir}/{wildcards.analysis}/{wildcards.prefix}/picard_markdup.txt -am {wildcards.basedir}/{wildcards.analysis}/{wildcards.prefix}/picard_alignment.txt -cl {wildcards.basedir}/{wildcards.analysis}/{wildcards.prefix}/gatk_callable.txt -f {wildcards.basedir}/{wildcards.analysis}/{wildcards.prefix}/fastqc.txt -fl {wildcards.basedir}/{wildcards.analysis}/{wildcards.prefix}/flagstats.txt -is {wildcards.basedir}/{wildcards.analysis}/{wildcards.prefix}/insert_size.txt -wes True -b {params.bed} -o {output}"
		shell(cmd)
