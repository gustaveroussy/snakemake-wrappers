rule validation_QC_cancer:
	input:
		qc = "{basedir}/{analysis}/{analysis}_qc_lab_temp.csv"
	output:
		flag = "{basedir}/{analysis}/{analysis}_qc_validation.done"
	params:
		mean_cov_wes = config["QC_VALIDATION"]["WES"]["MEAN_COV"],
		mean_cov_wgs_c = config["QC_VALIDATION"]["WGS-C"]["MEAN_COV"],
		mean_cov_wgs_t = config["QC_VALIDATION"]["WGS-T"]["MEAN_COV"],
		q30_wgs_c = config["QC_VALIDATION"]["WGS-C"]["Q30"],
		q30_wgs_t = config["QC_VALIDATION"]["WGS-T"]["Q30"],
		q30_wts = config["QC_VALIDATION"]["WTS"]["Q30"],
		couv_wgs_c = config["QC_VALIDATION"]["WGS-C"]["COUVERTURE"],
		couv_wgs_t = config["QC_VALIDATION"]["WGS-T"]["COUVERTURE"],
	log:
		"{basedir}/{analysis}/log/{analysis}_qc_validation.log"
	run:
		####### WGS-C #####
		mean_cov_wgs_c = int(params.mean_cov_wgs_c)
		q30_wgs_c = int(params.q30_wgs_c)
		couv_wgs_c = int(params.couv_wgs_c)
		####### WGS-T #####
		mean_cov_wgs_t = int(params.mean_cov_wgs_t)
		q30_wgs_t = int(params.q30_wgs_t)
		couv_wgs_t = int(params.couv_wgs_t)
		####### WES-T #####
		mean_cov_wes = int(params.mean_cov_wes)
		####### WTS ##########
		q30_wts = int(params.q30_wts)
		######################
		pass_fail = []
		with open(input.qc, "r") as f:
			data = f.readlines()
			for x in [4,5,6,7]:
				print("l :",data[x])
				if "-" in data[x][0]:
					print("NO SAMPLE")
					continue
				else:
					if "WES-T" in data[x]:
						if float(data[x].split(',')[2]) >= mean_cov_wes:
							pass_fail.append("pass")
						else:
							pass_fail.append("failed")
					elif "WGS-T" in data[x]:
						if float(data[x].split(',')[2]) >= mean_cov_wgs_t and float(data[x].split(",")[3]) >= q30_wgs_t and float(data[x].split(',')[4]) >= couv_wgs_t:
							pass_fail.append("pass")
						else:
							pass_fail.append("failed")
					elif "WGS-C" in data[x]:
						if float(data[x].split(',')[2]) >= mean_cov_wgs_c and float(data[x].split(",")[3]) >= q30_wgs_c and float(data[x].split(',')[4]) >= couv_wgs_c:
							pass_fail.append("pass")
						else:
							pass_fail.append("failed")
					elif "WTS" in data[x]:
						if float(data[x].split(',')[3]) >= q30_wts:
							pass_fail.append("pass")
						else:
							pass_fail.append("failed")
		print(pass_fail)
		Flag = True
		for k in pass_fail:
			if k != "pass":
				Flag = False
		shell("touch {output} 2>&1 | tee -a {log}")
