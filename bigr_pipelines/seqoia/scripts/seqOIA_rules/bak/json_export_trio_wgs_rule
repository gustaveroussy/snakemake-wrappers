rule json_export_trio_wgs:
	input:
		vcf = lambda wildcards: expand("{export_dir}/{analysis}/{analysis}_final.vcf",export_dir=export_dir, analysis=wildcards.analysis),
		config = lambda wildcards: expand("{export_dir}/{analysis}/config/",export_dir=export_dir, analysis=wildcards.analysis),
		qc = lambda wildcards: expand("{export_dir}/{analysis}/{analysis}_qc_lab.csv", export_dir=export_dir, analysis=wildcards.analysis),
		CNV = lambda wildcards: expand("{export_dir}/{analysis}/CNV/",export_dir=export_dir, analysis=wildcards.analysis),
		script_python = lambda wildcards: expand("{script_dir}/json_export_creation.py", script_dir = script_dir),
		tar_output = lambda wildcards: expand("{export_dir}/{analysis}/{analysis}.tar.gz",export_dir=export_dir, analysis=wildcards.analysis),
		bam = lambda wildcards: expand("{export_dir}/{analysis}/{prefix}/chr_{index}/{prefix}_chr_{index}_markdup.bam", export_dir=export_dir,analysis=wildcards.analysis, prefix=prefix, index=index),
		bai = lambda wildcards: expand("{export_dir}/{analysis}/{prefix}/chr_{index}/{prefix}_chr_{index}_markdup.bam.bai", export_dir=export_dir,analysis=wildcards.analysis, prefix=prefix, index=index)
	priority: 40
	output:
		"{export_dir}/{analysis}/{analysis}.json"
	log:	
		basedir+"/{analysis}/log/json_export_irods.log"
	params:
		proband = lambda wildcards : str(wildcards.analysis.split('_')[4]),
		pipeline_config = config["general_informations"]["PIPELINE_CONFIG"],
		sequenceur = lambda wildcards : config["general_informations"][str(proband[0].split('_S')[0])]["SEQUENCEUR"],
		run = lambda wildcards : config["general_informations"][str(proband[0].split('_S')[0])]["RUN"]
	shell:
		"python3 {input.script_python} -v {input.vcf} -c {input.config} -tar {input.tar_output} -cnv {input.CNV} -bam {input.bam} -bai {input.bai} -q {input.qc} -j {wildcards.export_dir}/{params.sequenceur}/{params.run}/json/{params.proband}.json -o {output} 2>&1 | tee -a {log}"
