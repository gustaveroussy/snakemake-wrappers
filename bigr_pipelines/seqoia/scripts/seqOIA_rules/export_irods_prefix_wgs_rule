rule export_irods_prefix_wgs:
	input:
		bam = lambda wildcards: expand("{basedir}/{analysis}/{prefix}/chr_{index}/{prefix}_chr_{index}_markdup.temp.bam", prefix=wildcards.prefix, index = index, analysis=analysis),
		bai = lambda wildcards: expand("{basedir}/{analysis}/{prefix}/chr_{index}/{prefix}_chr_{index}_markdup.temp.bam.bai", prefix=wildcards.prefix, index = index, analysis=analysis),
		QC = lambda wildcards: expand("{basedir}/{analysis}/{prefix}/{prefix}_qc_stat.csv", prefix = wildcards.prefix, analysis=analysis),
		vcf = "{basedir}/{analysis}/{prefix}/{prefix}_final.vcf"
	output:
		"{export_dir}/{analysis}/{prefix}_export_irods_vcf_bam.done"
	resources: io=30
	log:	
		basedir+"/{analysis}/log/{prefix}/{prefix}_export_irods.log"
	run:
		bam = input.bam
		bai = input.bai
		bam_list = []
		bai_list = []
		for k in bam:
			k = k.split('/')
			k = k[0:2] + ["."] + k[2:]
			bam_list.append("/".join(k))
		for k in bai:
			k = k.split('/')
			k = k[0:2] + ["."] + k[2:]
			bai_list.append("/".join(k))
		bai_string = " ".join(bai_list)
		bam_string = " ".join(bam_list)
		command = "rsync -Paz --ignore-existing --relative " + bai_string + " {wildcards.export_dir}/{wildcards.analysis}/ && rsync -Paz --ignore-existing --relative " + bam_string + " {wildcards.export_dir}/{wildcards.analysis}/ && rsync -Paz --ignore-existing {input.vcf} {wildcards.export_dir}/{wildcards.analysis}/ && touch {output} 2>&1 | tee -a {log}"
		shell(command)
		
			
