rule star_wts:
	input:
		flag = expand("{export_dir}/{sequenceur}/{run}/renaming.done",zip, sequenceur=sequenceur,  run=run, export_dir=export_dir),
		R1 = lambda wildcards: expand("{export_dir}/{sequenceur}/{run}/fastq/{sample}_R1_001.fastq.gz",sequenceur=sequenceur,  run=run, export_dir=export_dir, sample=wildcards.sample),
		R2 = lambda wildcards: expand("{export_dir}/{sequenceur}/{run}/fastq/{sample}_R2_001.fastq.gz",sequenceur=sequenceur,  run=run, export_dir=export_dir, sample=wildcards.sample)
	output:
		"{basedir}/{analysis}/{sample}/{sample}_sorted.bam"
	resources: io=20
	log:
		"{basedir}/{analysis}/log/{sample}/{sample}_star_sorted.log"
	params:
		reference = config["general_informations"]["FASTA_FILE"],
		run = lambda wildcards: config["general_informations"]["RUN"],
		sequenceur = lambda wildcards: config["general_informations"]["SEQUENCEUR"],
		star_options = config["star"]["OPTIONS"],
		pl_rg = "ILLUMINA",
		pm_rg = "NovaSeq 6000 Sequencing System",
		lb_rg = lambda wildcards: str(wildcards.sample).split('_')[0],
		pu_rg = config["general_informations"]["PLATFORM"],
		sm_rg = lambda wildcards: str(wildcards.sample).split('_')[0]
	shell:
		"STAR {params.star_options} --outSAMattrRGline ID:{wildcards.sample} PL:{params.pl_rg} LB:{params.lb_rg} PU:{params.pu_rg} SM:{params.sm_rg} --outFileNamePrefix {wildcards.basedir}/{wildcards.analysis}/{wildcards.sample}/{wildcards.sample}. --readFilesIn {input.R1} {input.R2} 2>&1 | tee -a {log} && mv {wildcards.basedir}/{wildcards.analysis}/{wildcards.sample}/{wildcards.sample}.Aligned.sortedByCoord.out.bam {output}"
