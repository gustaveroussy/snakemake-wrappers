import sys

sys.path.append("/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/common/python/")

from file_manager import (
    read_design,
    get_fasta_index_from_genome_path,
    get_fasta_dict_from_genome_path,
    get_vcf_tbi_from_vcf_path
)
from files_linker import link_fq
from write_yaml import write_yaml_from_path
from pathlib import Path
from snakemake.utils import min_version
min_version("6.0")

container: "docker://continuumio/miniconda3:4.4.10"

configfile: "config.yaml"

localrules: bigr_copy

design = read_design("design.tsv")

config_path = Path("config_variant_calling_ampliseq.yaml")
if not config_path.exists() or True:
    write_yaml_from_path(config_path, config)

configfile: config_path

localrules: bigr_copy

wildcard_constraints:
    sample = r"|".join(design["Sample_id"]),
    stream = r"1|2"

module bwa_fixmate:
    snakefile: "../../meta/bio/bwa_fixmate/test/Snakefile"
    config: {"threads": config["threads"], "genome": config["ref"]["fasta"]}


module gatk_bqsr:
    snakefile: "../../meta/bio/gatk_bqsr/test/Snakefile"
    config: {"threads": config["threads"], "genome": config["ref"]["fasta"], "dbsnp": config["ref"]["dbsnp"]}


module varscan2_calling:
    snakefile: "../../meta/bio/varscan2_calling/test/Snakefile"
    config: {"genome": config["ref"]["fasta"]}

fastq_links = link_fq(
    design.Sample_id,
    design.Upstream_file,
    design.Downstream_file
)

rule all:
    input:
        #expand(
        #    "snpsift/gwascat/{sample}.vcf.gz",
        #    sample=design["Sample_id"]
        #),
        expand(
            "snpsift/gwascat/{sample}.vcf.gz",
            #"snpsift/cosmic/{sample}.vcf",
            #stream=["1", "2"],
            sample=design["Sample_id"]
        )
    message:
        "Finishing the Ampliseq variant calling"

#################################
### FINAL VCF FILE INDEXATION ###
#################################

rule tabix_index:
    input:
        "snpsift/gwascat/{sample}.vcf.gz"
    output:
        "snpsift/gwascat/{sample}.vcf.gz.tbi"
    message:
        "Indexing {wildcards.sample} final annotated VCF with tabix"
    group:
        "Final_compression_{sample}"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1020,
        time_min=lambda wildcards, attempt: attempt * 45
    log:
        "logs/pbgzip/post_gwascat/{sample}.log"
    wrapper:
        "/bio/tabix"


rule compress_pbgzip:
    input:
        "snpsift/gwascat/{sample}.vcf"
    output:
        "snpsift/gwascat/{sample}.vcf.gz"
    message:
        "Compressing {wildcards.sample} final annotated VCF with pbgzip"
    group:
        "Final_compression_{sample}"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1020,
        time_min=lambda wildcards, attempt: attempt * 45
    log:
        "logs/pbgzip/post_gwascat/{sample}.log"
    wrapper:
        "/bio/compress/pbgzip"

###########################
### VCF FILE ANNOTATION ###
###########################

rule snpsift_gwascat:
    input:
        call = "snpsift/cosmic/{sample}.vcf",
        gwascat = config["ref"]["gwascat"]
    output:
        call = temp("snpsift/gwascat/{sample}.vcf")
    message:
        "Annotating {wildcards.sample} with GWAS Catalog"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1020 + 4096,
        time_min=lambda wildcards, attempt: attempt * 45
    log:
        "logs/snpsift/gwascat/{sample}.log"
    wrapper:
        "/bio/snpsift/gwascat"


rule snpsift_cosmic:
    input:
        call="snpsift/dbsnp/{sample}.vcf",
        database=config["ref"]["cosmic"]
    output:
        call=temp("snpsift/cosmic/{sample}.vcf")
    message:
        "Annotating {wildcards.sample} with COSMIC"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1020 + 4096,
        time_min=lambda wildcards, attempt: attempt * 45
    log:
        "logs/snpsift/cosmic/{sample}.log"
    wrapper:
        "/bio/snpsift/annotate"


rule snpsift_dbsnp:
    input:
        call="snpsift/kaviar/{sample}.vcf",
        database=config["ref"]["dbsnp"]
    output:
        call=temp("snpsift/dbsnp/{sample}.vcf")

    message:
        "Annotating {wildcards.sample} with dbSNP"
    threads: 1
    log:
        "logs/snpsift/dbsnp/{sample}.log"
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1020 + 4096,
        time_min=lambda wildcards, attempt: attempt * 45
    wrapper:
        "/bio/snpsift/annotate"


rule snpsift_kaviar:
    input:
        call="snpsift/gmt/{sample}.vcf",
        database=config["ref"]["kaviar"]
    output:
        call=temp("snpsift/kaviar/{sample}.vcf")

    message:
        "Annotating {wildcards.sample} with Kaviar"
    threads: 1
    log:
        "logs/snpsift/kaviar/{sample}.log"
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1020 + 4096,
        time_min=lambda wildcards, attempt: attempt * 45
    wrapper:
        "/bio/snpsift/annotate"


rule snpsift_gmt:
    input:
        call = "snpeff/{sample}.vcf",
        gmt = config["ref"]["gmt"]
    output:
        call = temp("snpsift/gmt/{sample}.vcf")
    message:
        "Annotating {wildcards.sample} with MSigDB"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1020 + 4096,
        time_min=lambda wildcards, attempt: attempt * 45
    wrapper:
        "/bio/snpsift/genesets"


rule snpeff_annotate:
    input:
        calls="snpsift/vartype/{sample}.vcf",
        db=config["ref"]["snpeff"]
    output:
        calls=temp("snpeff/{sample}.vcf"),
        stats="snpeff/{sample}.html",
        csvstats="snpeff/{sample}.csv"
    message:
        "Annotating {wildcards.sample} with Ensembl"
    threads: 1
    log:
        "logs/snpeff/{sample}.log"
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1020 + 4096,
        time_min=lambda wildcards, attempt: attempt * 45
    wrapper:
        "/bio/snpeff/annotate"


rule snpsift_vartype:
    input:
        vcf="bcftools/{sample}.vcf.gz",
        vcf_tbi="bcftools/{sample}.vcf.gz.tbi"
    output:
        vcf=temp("snpsift/vartype/{sample}.vcf")
    message:
        "Annotating variant types in {wildcards.sample}"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1020 + 4096,
        time_min=lambda wildcards, attempt: attempt * 45
    log:
        "logs/snpsift/varType/{sample}.log"
    wrapper:
        "/bio/snpsift/varType"


###############################
### VARIANT CALLING VARSCAN ###
###############################

use rule * from varscan2_calling as *

use rule samtools_mpilup from varscan2_calling with:
    input:
        bam="gatk/recal_bam/{sample}.bam",
        reference_genome=config['ref']['fasta'],
        reference_genome_idx=get_fasta_index_from_genome_path(config['ref']['fasta']),


##############################
### GATK BAM RECALIBRATION ###
##############################

use rule gatk_apply_baserecalibrator from gatk_bqsr with:
    input:
        bam="samtools/sort/{sample}.bam",
        bam_index="samtools/sort/{sample}.bam.bai",
        ref=config['ref']['fasta'],
        ref_idx=get_fasta_index_from_genome_path(config['ref']['fasta']),
        ref_dict=get_fasta_dict_from_genome_path(config['ref']['fasta']),
        recal_table="gatk/recal_data_table/{sample}.grp"


use rule gatk_compute_baserecalibration_table from gatk_bqsr with:
    input:
        bam="samtools/sort/{sample}.bam",
        bam_index="samtools/sort/{sample}.bam.bai",
        ref=config['ref']['fasta'],
        ref_idx=get_fasta_index_from_genome_path(config['ref']['fasta']),
        ref_dict=get_fasta_dict_from_genome_path(config['ref']['fasta']),
        known=config['ref']['dbsnp'],
        known_idx=get_vcf_tbi_from_vcf_path(config['ref']['dbsnp'])


###################
### BWA MAPPING ###
###################

use rule * from bwa_fixmate as bwa_fixmate_*

use rule bwa_mem from bwa_fixmate with:
    input:
        reads=expand(
            "fastp/trimmed/pe/{sample}.{stream}.fastq",
            stream=["1", "2"],
            allow_missing=True
        ),
        index=multiext(
            "bwa_mem2/index/genome", ".0123", ".amb", ".ann", ".pac"
        )


############################
### FASTP FASTQ CLEANING ###
############################

rule fastp_clean:
    input:
        sample=expand(
            "reads/{sample}.{stream}.fq.gz",
            stream=["1", "2"],
            allow_missing=True
        ),
    output:
        trimmed=expand(
            "fastp/trimmed/pe/{sample}.{stream}.fastq",
            stream=["1", "2"],
            allow_missing=True
        ),
        html="fastp/html/pe/{sample}.fastp.html",
        json="fastp/json/pe/{sample}.fastp.json"
    message: "Cleaning {wildcards.sample} with Fastp"
    threads: 1
    resources:
        mem_mb=lambda wildcard, attempt: min(attempt * 4096, 15360),
        time_min=lambda wildcard, attempt: attempt * 45
    params:
        adapters=config.get("fastp_adapters", None),
        extra=config.get("fastp_extra", "")
    log:
        "logs/fastp/{sample}.log"
    wrapper:
        "/bio/fastp"


#################################################
### Gather files from iRODS or mounting point ###
#################################################

rule bigr_copy:
    output:
        "reads/{sample}.{stream}.fq.gz"
    message:
        "Gathering {wildcards.sample} fastq file ({wildcards.stream})"
    threads: 1
    resources:
        mem_mb=lambda wildcard, attempt: min(attempt * 1024, 2048),
        time_min=lambda wildcard, attempt: attempt * 45
    params:
        input=lambda wildcards, output: fastq_links[output[0]]
    log:
        "logs/bigr_copy/{sample}.{stream}.log"
    wrapper:
        "/bio/BiGR/copy"
