import logging
import os
import pandas
import sys
from pathlib import Path
from typing import Any, List

logging.basicConfig(
    filename="snakemake.sigprofiler.log",
    filemode="w",
    level=logging.DEBUG
)

worflow_source_dir = Path(next(iter(workflow.get_sources()))).absolute().parent
worflow_source_dir = Path("/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/sigprofiler_signatures/")
common = str(worflow_source_dir / "../common/python")
sys.path.append(common)

from file_manager import *
from files_linker import *
from write_yaml import *
from messages import *
from snakemake.utils import min_version
min_version("6.0")

default_config = read_yaml(worflow_source_dir / "config.hg38.yaml")
configfile: get_config(default_config)
design = get_design(os.getcwd(), search_vcf_files)
design["Sample_id"] = design["Sample_id"].str.replace("-", "_")

install_genome = False

container: "docker://continuumio/miniconda3:4.4.10"
#localrules: bigr_copy

samples_list = design["Sample_id"].tolist()

wildcard_constraints:
    sample = r"|".join(samples_list)

vcf_links = link_vcf(
    design.Sample_id,
    design.Upstream_file
)

organism = (config.get("params", {"genome_build": "GRCh38"})
                  .get("genome_build", "GRCh38"))

ruleorder: sigprofiler_1_1_6_cohort_prepare > sigprofiler_1_1_6_prepare

rule target:
    input:
        expand("{sample}/sigprofiler/results", sample=design["Sample_id"]),
        "complete/sigprofiler/results"


rule sigprofiler_1_1_6_prepare:
    input:
        vcf = "data_input/calls/{sample}.vcf.gz"
    output:
        temp(directory("{sample}/sigprofiler/vcf"))
    threads: 4
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 1024 * 2,
        time_min = lambda wildcards, attempt: attempt * 30,
        tmpdir = "tmp"
    log:
        "logs/SigProfiler/prepare/{sample}.log"
    params:
        mk = "--parents --verbose",
        gz = "--stdout --force",
        cp = "--verbose",
        gr = '-vP "^#"',
        cut = "-f 1-5",
        sed = "'/^chr/! s/^/chr/g'",
    shell:
        "mkdir {params.mk} {wildcards.sample}/sigprofiler/vcf > {log} 2>&1 && "
        "gunzip {params.gz} {input.vcf} | grep {params.gr} | cut {params.cut} | "
        "sed {params.sed} > {wildcards.sample}/sigprofiler/vcf/{wildcards.sample}.vcf 2>> {log} && "
        "tree >> {log} 2>&1  "


rule sigprofiler_1_1_6_cohort_prepare:
    input:
        expand("{sample}/sigprofiler/vcf", sample=design["Sample_id"])
    output:
        temp(directory("complete/sigprofiler/vcf"))
    threads: 1
    message: "Aggregating complete cohort for supplemental analyses"
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 512,
        time_min = lambda wildcards, attempt: attempt * 30,
        tmpdir = "tmp"
    params:
        cp = "--verbose",
        mk = "--verbose --parents"
    log:
        "sigprofiler/complete/prepare.log"
    shell:
        'mkdir {params.mk} {output} > {log} 2>&1 && '
        'for SAMPLE in {input}; '
        'do cp {params.cp} ${{SAMPLE}}/*.vcf {output}; done '
        '>> {log} 2>&1 '


rule sigprofiler_1_1_6_run:
    input:
        vcf = "{sample}/sigprofiler/vcf",
        sigprofiler_script = "/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/sigprofiler_signatures/scripts/sigprofiler_1.1.6.py"
    output:
        directory("{sample}/sigprofiler/results")
    threads: 10
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 1024 * 2,
        time_min = lambda wildcards, attempt: attempt * 15,
        tmpdir = "tmp"
    log:
        "logs/SigProfiler/run/{sample}.log"
    params:
        org = organism,
        install = "--install" if install_genome is True else "",
        rundir = lambda wildcards: f"{wildcards.sample}/sigprofiler"
    conda:
        "/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/sigprofiler_signatures/env/sigprofiler.p37.yaml"
    shell:
        # "cd {params.rundir} > {log} 2>&1 && echo 'Moved to {params.rundir}' >> {log} 2>&1 && tree >> {log} 2>&1 && "
        "tree -a {params.rundir} >> {log} 2>&1 && "
        "rm --force --verbose {params.rundir}/vcf/.snakemake_timestamp >> {log} 2>&1 && "
        "python3 {input.sigprofiler_script} {params.org} {params.rundir} {params.install} >> {log} 2>&1 "


rule sigprofiler_1_1_6_complete_run:
    input:
        vcf = "complete/sigprofiler/vcf",
        sigprofiler_script = "/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/sigprofiler_signatures/scripts/sigprofiler_1.1.6.py"
    output:
        directory("complete/sigprofiler/results")
    threads: 10
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 1024 * 3,
        time_min = lambda wildcards, attempt: attempt * 240,
        gres = "gpu:t4:1",
        tmpdir = "tmp"
    log:
        "logs/SigProfiler/run/complete.log"
    params:
        org = organism,
        install = "--install" if install_genome is True else "",
        rundir = "complete/sigprofiler"
    conda:
        "/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/sigprofiler_signatures/env/sigprofiler.p37.yaml"
    shell:
        'tree -a {params.rundir} >> {log} 2>&1 && '
        'rm --force --verbose {params.rundir}/vcf/.snakemake_timestamp >> {log} 2>&1 && '
        'export LD_LIBRARY_PATH="/usr/local/cuda-11.1/targets/x86_64-linux/lib:${{LD_LIBRARY_PATH}}" >> {log} 2>&1 && '
        'export PATH="/usr/local/cuda/bin:${{PATH}}" >> {log} 2>&1 && '
        'python3 {input.sigprofiler_script} {params.org} {params.rundir} {params.install} >> {log} 2>&1 '


rule sigprofiler_single_sample_sbs:
    input:
        vcf = "data_input/calls/{sample}.vcf.gz",
        sigprofiler_script = "/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/sigprofiler_signatures/scripts/single_sample.py"
    output:
        outdir = directory("SigProfiler/{sample}/test/output"),
        vcf = "SigProfiler/{sample}/test/{sample}.vcf"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1024 * 4,
        time_min=lambda wildcards, attempt: attempt * 45,
        tmpdir="tmp"
    log:
        "logs/single_sample/{sample}.log"
    conda:
        "/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/sigprofiler_signatures/env/single_sample_sigprofiler.yaml"
    params:
        mk = lambda wildcards: f"--parents --verbose SigProfiler/{wildcards.sample}/test/",
        gz = "--stdout --force",
        org = organism,
        gr = '-vP "^#"',
        cut = "-f 1-5",
        sed = "'/^chr/! s/^/chr/g'",
        install = "--install" if install_genome is True else ""
    shell:
        "mkdir {params.mk} > {log} 2>&1 && "
        "(gunzip {params.gz} {input.vcf} | "
        " grep {params.gr} | "
        " cut {params.cut} | "
        " sed {params.sed} ) > {output.vcf} 2>> {log} && "
        "python3 {input.sigprofiler_script} {output.vcf} {output.outdir}"
        " --organism {params.org} {params.install} >> {log} 2>&1 "



rule sigprofiler_single_sample_dbs:
    input:
        vcf = "data_input/calls/{sample}.vcf.gz",
        sigprofiler_script = "/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/sigprofiler_signatures/scripts/single_sample.py",
        dbs = "/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/conda/e31318e4e678218a151c58b51adefff7/lib/python3.7/site-packages/sigproSS/input/sigProfiler_DBS_signatures.csv"
    output:
        outdir = directory("DBS/{sample}/test/output"),
        vcf = "DBS/{sample}/test/{sample}.vcf"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1024 * 4,
        time_min=lambda wildcards, attempt: attempt * 45,
        tmpdir="tmp"
    log:
        "logs/single_sample/{sample}.log"
    conda:
        "/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/sigprofiler_signatures/env/single_sample_sigprofiler.yaml"
    params:
        mk = lambda wildcards: f"--parents --verbose DBS/{wildcards.sample}/test/",
        gz = "--stdout --force",
        org = organism,
        gr = '-vP "^#"',
        cut = "-f 1-5",
        sed = "'/^chr/! s/^/chr/g'",
        install = "--install" if install_genome is True else "",
    shell:
        "mkdir {params.mk} > {log} 2>&1 && "
        "(gunzip {params.gz} {input.vcf} | "
        " grep {params.gr} | "
        " cut {params.cut} | "
        " sed {params.sed} ) > {output.vcf} 2>> {log} && "
        "python3 {input.sigprofiler_script} {output.vcf} {output.outdir}"
        " --dbs {input.dbs}"
        " --organism {params.org} {params.install} >> {log} 2>&1 "


rule sigprofiler_single_sample_id:
    input:
        vcf = "data_input/calls/{sample}.vcf.gz",
        sigprofiler_script = "/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/sigprofiler_signatures/scripts/single_sample.py",
        id = "/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/conda/e31318e4e678218a151c58b51adefff7/lib/python3.7/site-packages/sigproSS/input/sigProfiler_ID_signatures.csv"
    output:
        outdir = directory("ID/{sample}/test/output"),
        vcf = "ID/{sample}/test/{sample}.vcf"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1024 * 4,
        time_min=lambda wildcards, attempt: attempt * 45,
        tmpdir="tmp"
    log:
        "logs/single_sample/{sample}.log"
    conda:
        "/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/sigprofiler_signatures/env/single_sample_sigprofiler.yaml"
    params:
        mk = lambda wildcards: f"--parents --verbose ID/{wildcards.sample}/test/",
        gz = "--stdout --force",
        org = organism,
        gr = '-vP "^#"',
        cut = "-f 1-5",
        sed = "'/^chr/! s/^/chr/g'",
        install = "--install" if install_genome is True else "",
    shell:
        "mkdir {params.mk} > {log} 2>&1 && "
        "(gunzip {params.gz} {input.vcf} | "
        " grep {params.gr} | "
        " cut {params.cut} | "
        " sed {params.sed} ) > {output.vcf} 2>> {log} && "
        "python3 {input.sigprofiler_script} {output.vcf} {output.outdir}"
        " --id {input.id}"
        " --organism {params.org} {params.install} >> {log} 2>&1 "
