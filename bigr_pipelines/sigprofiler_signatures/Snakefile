import logging
import os
import pandas
import sys
from pathlib import Path

logging.basicConfig(
    filename="snakemake.sigprofiler.log",
    filemode="w",
    level=logging.DEBUG
)

worflow_source_dir = Path(next(iter(workflow.get_sources()))).absolute().parent
common = str(worflow_source_dir / "../common/python")
sys.path.append(common)

from file_manager import *
from files_linker import *
from write_yaml import *
from messages import *
from snakemake.utils import min_version
min_version("6.0")

default_config = read_yaml(worflow_source_dir / "config.hg38.yaml")
configfile: get_config(default_config)
design = build_design(os.getcwd(), search_vcf_files)
design["Sample_id"] = design["Sample_id"].str.replace("-", "_")

container: "docker://continuumio/miniconda3:4.4.10"
localrules: bigr_copy

samples_list = design["Sample_id"]

wildcard_constraints:
    sample = r"|".join(samples_list)

vcf_links = link_vcf(
    design.Sample_id,
    design.Upstream_file
)

organism = (config.get("params", {"genome_build": "GRCh38"})
                  .get("genome_build", "GRCh38"))

rule target:
    input:
        expand(
            "SigProfiler/{sample}/{sample}_matrix.yaml",
            sample=samples_list
        )


rule sigprofiler_matrix_generator:
    input:
        vcf = "snpsift/fixed/{sample}.vcf.gz",
        sigprofiler_script = "/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/sigprofiler_signatures/scripts/matrix_generator.py"
    output:
        yaml = "SigProfiler/{sample}/{sample}_matrix.yaml",
        matrices = directory("SigProfiler/{sample}/test/input")
    message:
        "Building substitution matrices with SigProfiler on {wildcards.sample}"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1024 * 5,
        time_min=lambda wildcards, attempt: attempt * 45,
        tmpdir="tmp"
    conda:
        "/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/sigprofiler_signatures/env/matrix_generator.yaml"
    log:
        "logs/sigprofiler/matrix_generator/{sample}.log"
    params:
        mk = "--parents --verbose",
        gz = "--stdout --decompress --force --verbose"
        org = organism
    shell:
        "mkdir {params.mk} {output.matrices}/input "
        "> {log} 2>&1 && "
        "gunzip {params.gz} {input.vcf} > {output.matrices}/input/{wildcards.sample}.vcf "
        "2>> {log} && "
        "python3 {input.sigprofiler_script} {input.vcf} {output.yaml} --organism {params.org}"
        ">> {log} 2>&1 "


rule signature_extractor:
    input:
        matrices = "SigProfiler/{sample}/test/input",
        sigprofiler_script = "/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/sigprofiler_signatures/scripts/signature_extractor.py"
    output:
        directory("SigProfiler/{sample}/test/Res")
    message:
        "Extracting signatures in {wildcards.sample}"
    threads: 8
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1024,
        time_min=lambda wildcards, attempt: attempt * 15,
        tmpdir="tmp",
        gres="gpu:t4:1"
    log:
        "logs/sigprofiler/extractor/{sample}.log"
    conda:
        "/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/sigprofiler_signatures/scripts/extractor.yaml"
    params:
        sig = lambda wildcards: f"SigProfiler/{wildcards.sample}/test",
        org = organism
    shell:
        "python3 {input.sigprofiler_script} "
        "{params.sig} "
        "--threads {snakemake.threads} "
        "--organism {params.org} "
        "> {log} 2>&1"


rule sigprofiler_decompose:
    input:
        res = "SigProfiler/{sample}/test/Res",
        sigprofiler_script = "/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/sigprofiler_signatures/scripts/sigprofiler_decompose.py"
    output:
        directory("SigProfiler/{sample}/test/Res2")
    message:
        "Decomposing sugnatures on {wildcards.sample}"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1024,
        time_min=lambda wildcards, attempt: attempt * 15,
        tmpdir="tmp"
    log:
        "logs/sigprofiler/decompose/{sample}.log"
    params:
        org = organism
    conda:
        "/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/sigprofiler_signatures/scripts/sigprofiler.yaml"
    shell:
        "python3 {input.sigprofiler_script} "
        "{output} "
        "--organism {params.organism} "
        "--verbose "
        "> {log} 2>&1"
