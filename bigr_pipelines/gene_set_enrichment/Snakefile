from snakemake.utils import min_version
from pathlib import Path
from yaml import dump
from typing import List
min_version("6.0")

import sys

worflow_source_dir = Path(next(iter(workflow.get_sources()))).absolute().parent
common = str(worflow_source_dir / "../common/python")
sys.path.append(common)

from file_manager import *
from files_linker import *
from write_yaml import *
from messages import message

logging.basicConfig(
    filename="snakemake.gene_set_enrichment.log",
    filemode="w",
    level=logging.DEBUG
)

default_config = read_yaml(worflow_source_dir / "config.hg38.yaml")
configfile: get_config(default_config)


def get_comparison_list(path: str) -> List[str]:
    """
    Return list of comparison levels
    Open the input file listing comparisons and ranking value
    """
    with open(path, "r") as ranks:
        header = next(ranks)
        return header.strip().split("\t")[1:]

comparisons = get_comparison_list(
    config.get("ranks.list.tsv", "ranks.list.tsv")
)

dbs = list(config.get("gmt", {}).keys()) + [
    "NetworkCancerGenes",
    "DiseaseOnt",
    "DisGenNet"
]

ppis = list(config.get("ppi", {}).keys())
all_dbs = dbs + ppis

methods = ["enrich"] # ["gsea", "enrich"]
plots = ["barplot", "dotplot", "upsetplot"] # "heatplot", "treeplot"]
keytypes = ["ENSEMBL", "ENTREZID", "SYMBOL", "ENSEMBLPROT"] 



def plot_list():
    results = []
    for met in methods:
        for comp in comparisons:
            for plot in plots:
                for db in dbs:
                    if db in config["gmt"].keys():
                        if config["gmt"][db].endswith(".entrez.gmt"):
                            results.append(
                                f"results/{comp}/{db}.ENTREZID/{plot}.{met}.png"
                            )
                        elif config["gmt"][db].endswith(".ENSG.gmt"):
                            results.append(
                                f"results/{comp}/{db}.ENSEMBL/{plot}.{met}.png"
                            )
                        elif config["gmt"][db].endswith(".symbols.gmt"):
                            results.append(
                                f"results/{comp}/{db}.SYMBOL/{plot}.{met}.png"
                            )
                    else:
                        results.append(
                                f"results/{comp}/{db}.ENTREZID/{plot}.{met}.png"
                            )

    for met in methods:
        for comp in comparisons:
            for plot in plots:
                for ppi in ppis:
                    results.append(f"results/{comp}/{ppi}.ENSEMBLPROT/{plot}.{met}.png")

    return results


ruleorder: enrichDO > enricherGMT
ruleorder: enrichDGN > enricherGMT
ruleorder: enrichNCG > enricherGMT

wildcard_constraints:
    comparison=r"|".join(comparisons),
    method=r"|".join(methods),
    db=r"|".join(all_dbs),
    keytype=r"|".join(keytypes),
    ppi=r"|".join(ppis)


rule target:
    input:
        plot_list()



rule expand_rank_list:
    input:
        tsv=config.get("ranks.list.tsv", "ranks.list.tsv")
    output:
        tsv=expand(
            "gene_lists/ENTREZID/{comparison}.tsv",
            comparison=comparisons
        ),
        entrez_rds=temp(expand(
            "gene_lists/ENTREZID/{comparison}.RDS",
            comparison=comparisons
        )),
        symbol_rds=temp(expand(
            "gene_lists/SYMBOL/{comparison}.RDS",
            comparison=comparisons
        )),
        ensembl_rds=temp(expand(
            "gene_lists/ENSEMBL/{comparison}.RDS",
            comparison=comparisons
        )),
        protein_rds = temp(expand(
            "gene_lists/ENSEMBLPROT/{comparison}.RDS",
            comparison=comparisons
        )),
        universe = temp(expand(
            "gene_lists/universe/{comparison}.RDS",
            comparison=comparisons
        ))
    message: "Expanding rank lists"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1024 * 2,
        time_min=lambda wildcards, attempt: attempt * 20,
        tmpdir="tmp"
    params:
        gene_id_type=config.get(
            "gene_id_type", "ENSEMBL"
        )
    log:
        "logs/expand.log"
    wrapper:
        "bio/clusterProfiler/hg38_genelist"


##############################
### Use of ClusterProfiler ###
##############################


module clusterprofiler_meta:
    snakefile: "../../meta/bio/clusterprofiler/test/Snakefile"
    config: config


use rule * from clusterprofiler_meta

