from snakemake.utils import min_version
from pathlib import Path
from yaml import dump
min_version("6.0")

default_salmon_config = {
    "design": "design.tsv"
    "ref": {
        "gtf": "/path/to/gtf",
        "transcriptome": "/path/to/fasta",
        "genome": "/path/to/other/fasta"
    },
    "params":
        "salmon_libtype": "A",
        "salmon_quant_extra": "--numBootstraps 100 --validateMappings --gcBias --seqBias --posBias",
        "salmon_index_extra": "--keepDuplicates --gencode",
        "fastp_adapters": "",
        "fastp_extra": (
            "--cut_front "
            "--cut_tail "
            "--cut_window_size 6 "
            "--cut_mean_quality 10 "
            "--unqualified_percent_limit 50 "
            "--n_base_limit 7 "
            "--average_qual 0 "
            "--length_required 15 "
            "--overrepresentation_analysis"
        )
}

config_path = Path("config_salmon_count.yaml")
if not config_path.exists():
    with config_path.open("w") as config_stream:
        config_stream.write(
            dump(default_salmon_config, default_flow_style=False)
        )


#############################
### Salmon quantification ###
#############################

salmon_config = {
    "genome": config["ref"]["genome"],
    "transcriptome": config["ref"]["transcriptome"],
    "gtf": config["ref"]["gtf"],
    "salmon_libtype": config["params"]["salmon_libtype"],
    "salmon_quant_extra": config["params"]["salmon_quant_extra"],
    "salmon_index_extra": config["params"]["salmon_index_extra"]
}


module salmon_meta:
    snakefile: "../../meta/bio/salmon/test/Snakefile"
    config: salmon_config


use rule * from salmon_meta as salmon_meta_*


############################
### FASTP FASTQ CLEANING ###
############################

rule fastp_clean:
    input:
        sample=expand(
            "reads/{sample}.{stream}.fq.gz",
            stream=["1", "2"],
            allow_missing=True
        ),
    output:
        trimmed=expand(
            "fastp/trimmed/pe/{sample}.{stream}.fastq",
            stream=["1", "2"],
            allow_missing=True
        ),
        html="fastp/html/pe/{sample}.fastp.html",
        json=temp("fastp/json/pe/{sample}.fastp.json")
    message: "Cleaning {wildcards.sample} with Fastp"
    threads: 1
    resources:
        mem_mb=lambda wildcard, attempt: min(attempt * 4096, 15360),
        time_min=lambda wildcard, attempt: attempt * 45
    params:
        adapters=config["params"].get("fastp_adapters", None),
        extra=config["params"].get("fastp_extra", "")
    log:
        "logs/fastp/{sample}.log"
    wrapper:
        "/bio/fastp"


#################################################
### Gather files from iRODS or mounting point ###
#################################################

rule bigr_copy:
    output:
        "reads/{sample}.{stream}.fq.gz"
    message:
        "Gathering {wildcards.sample} fastq file ({wildcards.stream})"
    threads: 1
    resources:
        mem_mb=lambda wildcard, attempt: min(attempt * 1024, 2048),
        time_min=lambda wildcard, attempt: attempt * 45
    params:
        input=lambda wildcards, output: fastq_links[output[0]]
    log:
        "logs/bigr_copy/{sample}.{stream}.log"
    wrapper:
        "/bio/BiGR/copy"
