#####################################
# Check Snakemake version           #
# Import search-and-buil functions  #
# for config and design             #
#####################################

from snakemake.utils import min_version
from pathlib import Path
from yaml import dump

min_version("7.5")

import sys

worflow_source_dir = Path(snakemake.workflow.srcdir("."))
common = str(worflow_source_dir / ".." / "common" / "python")
sys.path.append(common)

from file_manager import *
from files_linker import *
from write_yaml import *
from messages import message

#####################
# Setup environment #
#####################

logging.basicConfig(
    filename="snakemake.salmon_quant.log", filemode="w", level=logging.DEBUG
)


default_config = read_yaml(worflow_source_dir / "config.hg38.yaml")
configfile: get_config(default_config)
design = get_design(os.getcwd(), search_fastq_pairs)

##################################
# Setup globals and fix wilcards #
##################################

fastq_links = link_fq(design.Sample_id, design.Upstream_file, design.Downstream_file)


wildcard_constraints:
    sample=r"|".join(design.Sample_id.to_list()),
    stream=r"|".join(map(str, range(3))),


#################################################
### Gather files from iRODS or mounting point ###
#################################################


include: "rules/001.bigr_copy.smk"


############################
### FASTP FASTQ CLEANING ###
############################


# See quality controls & trimming:
# at: rules/001.qc.smk


########################
### Quality Controls ###
########################


include: "rules/002.qc.smk"



#############################
### Salmon quantification ###
#############################


include: "rules/003.salmon.smk"

########################
### Aggregate counts ###
########################


include: "rules/004.aggregate.smk"


#################
### Main rule ###
#################


rule target_salmon_quant:
    input:
        "multiqc/MultiQC.html",
        "salmon/TPM.genes.tsv",
        "salmon/TPM.transcripts.tsv",
        "salmon/Raw.genes.tsv"
    output:
        directory("results_to_upload")
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 512,
        time_min=lambda wildcards, attempt: attempt * 25,
        tmpdir="tmp"
    log:
        "logs/results_to_upload.log"
    params:
        "--verbose --checksum --human-readable"
    shell:
        "rsync {params} {input} {output} > {log} 2>&1"
