import sys

sys.path.append("/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/common/python")

from file_manager import *
from files_linker import link_fq
from write_yaml import *
from pathlib import Path

from snakemake.utils import min_version
min_version("6.0")

# default_config_fastqc_multiqc = {
#     "design": "design.tsv",
#     "fastq_screen": {
#         "database": {
#             "Contaminants": {
#                 "bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/Fastq_Screen/0.14.0/Adapters"
#             },
#             "Arabidopsis_thaliana.TAIR10": {
#                 "bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/Fastq_Screen/0.14.0/Arabidopsis"
#             },
#             "BDGP6": {
#                 "bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/Fastq_Screen/0.14.0/Drosophila"
#             },
#             "Ecoli": {
#                 "bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/Fastq_Screen/0.14.0/E_coli"
#             },
#             "Homo_sapiens.GRCh38": {
#                 "bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/Fastq_Screen/0.14.0/Human"
#             },
#             "Lambda": {
#                 "bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/Fastq_Screen/0.14.0/Lambda"
#             },
#             "mitochondria": {
#                 "bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/Fastq_Screen/0.14.0/Mitochondria"
#             },
#             "Mus_musculus.GRCm38": {
#                 "bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/Fastq_Screen/0.14.0/Mouse"
#             },
#             "phi_plus_SNPs": {
#                 "bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/Fastq_Screen/0.14.0/PhiX"
#             },
#             "Rnor_6.0": {
#                 "bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/Fastq_Screen/0.14.0/Rat"
#             },
#             "GRCm38_rRNA": {
#                 "bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/Fastq_Screen/0.14.0/rRNA"
#             },
#             "Vectors": {
#                 "bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/Fastq_Screen/0.14.0/Vectors"
#             },
#             "Worm": {
#                 "bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/Fastq_Screen/0.14.0/Worm"
#             },
#             "Yeast": {
#                 "bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/Fastq_Screen/0.14.0/Yeast"
#             }
#         },
#         'aligner_paths': {'bowtie2': 'bowtie2'}
#     }
# }

default_config = read_yaml("/mnt/beegfs/pipelines/snakemake-wrappers/bigr_pipelines/fastqc_multiqc/config.yaml")
config_path = get_config()
design = get_design(os.getcwd(), search_fastq_pairs)

configfile: config_path
container: "docker://continuumio/miniconda3:4.4.10"


##################################
### Gather all quality reports ###
##################################

rule multiqc:
    input:
        fqc_zip=expand(
            "fastqc/{sample}_fastqc.zip",
            sample=design["Sample_id"]
        ),
        fqc_html=expand(
            "fastqc/{sample}.html",
            sample=design["Sample_id"]
        ),
        txt=expand(
            "fastq_screen/{sample}.fastq_screen.txt",
            sample=design["Sample_id"]
        ),
        png=expand(
            "fastq_screen/{sample}.fastq_screen.png",
            sample=design["Sample_id"]
        ),
    output:
        "multiqc.html"
    message:
        "Gathering all quality reports"
    threads: 1
    resources:
        mem_mb=lambda wildcard, attempt: min(attempt * 1024, 4096),
        time_min=lambda wildcard, attempt: attempt * 50
    params:
        ""
    log:
        "logs/multiqc.log"
    wrapper:
        "/bio/multiqc"


#########################################
### Assess quality of each fastq file ###
#########################################

rule fastqc:
    input:
        "reads/{sample}.fq.gz"
    output:
        html="fastqc/{sample}.html",
        zip="fastqc/{sample}_fastqc.zip"
    message:
        "Assessing quality of {wildcards.sample}, "
    threads: 1
    resources:
        mem_mb=lambda wildcard, attempt: min(attempt * 1024, 4096),
        time_min=lambda wildcard, attempt: attempt * 50
    params:
        ""
    log:
        "logs/fastqc/{sample}.log"
    wrapper:
        "/bio/fastqc"


rule fastq_screen:
    input:
        "reads/{sample}.fq.gz"
    output:
        txt="fastq_screen/{sample}.fastq_screen.txt",
        png="fastq_screen/{sample}.fastq_screen.png"
    message:
        "Assessing quality of {wildcards.sample}, "
    threads: config.get("threads", 20)
    resources:
        mem_mb=lambda wildcard, attempt: min(attempt * 4096, 8192),
        time_min=lambda wildcard, attempt: attempt * 50
    params:
        fastq_screen_config="fastq_screen.conf",
        subset=100000,
        aligner='bowtie2'
    log:
        "logs/fastqc/{sample}.log"
    wrapper:
        "/bio/fastq_screen"


#################################################
### Gather files from iRODS or mounting point ###
#################################################

rule bigr_copy:
    output:
        "reads/{sample}.fq.gz"
    message:
        "Gathering {wildcards.sample} fastq file"
    threads: 1
    resources:
        mem_mb=lambda wildcard, attempt: min(attempt * 1024, 2048),
        time_min=lambda wildcard, attempt: attempt * 45
    params:
        input=lambda wildcards, output: fastq_links[output]
    log:
        "logs/bigr_copy/{sample}.log"
    wrapper:
        "/bio/bigr/copy"
