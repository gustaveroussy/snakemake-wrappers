from pathlib import Path


samples_list = sample=[
    str(f.name)[:-len(".vcf.gz")]
    for f in Path("calls").iterdir()
    if str(f.name).lower().endswith(".vcf.gz")
]


rule all:
    input:
        calls=expand(
            "snpsift/cosmic/{sample}.vcf.gz{index}",
            sample=samples_list,
            index=["", ".tbi"]
        ),
        qc="multiqc/SnpEff_annotation.html"
    message:
        "Finishing the annotation pipeline"

###############
### MultiQC ###
###############

rule multiqc:
    input:
        expand(
            "snpeff/report/{sample}.html",
            sample=samples_list
        ),
        expand(
            "snpeff/csvstats/{sample}.csv",
            sample=samples_list
        )
    output:
        "multiqc/SnpEff_annotation.html"
    message:
        "Aggregating quality reports from SnpEff"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: min(attempt * 1536, 10240),
        time_minlambda wildcards, attempt: attempt * 35
    log:
        "logs/multiqc.log"
    wrapper:
        "/bio/multiqc"


#################################
### FINAL VCF FILE INDEXATION ###
#################################

rule tabix_index:
    input:
        "snpsift/gwascat/{sample}.vcf.gz"
    output:
        "snpsift/gwascat/{sample}.vcf.gz.tbi"
    message:
        "Indexing {wildcards.sample} final annotated VCF with tabix"
    group:
        "Final_compression_{sample}"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1020,
        time_min=lambda wildcards, attempt: attempt * 45
    log:
        "logs/pbgzip/post_gwascat/{sample}.log"
    wrapper:
        "/bio/tabix"


rule compress_pbgzip:
    input:
        "snpsift/gwascat/{sample}.vcf"
    output:
        "snpsift/gwascat/{sample}.vcf.gz"
    message:
        "Compressing {wildcards.sample} final annotated VCF with pbgzip"
    group:
        "Final_compression_{sample}"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1020,
        time_min=lambda wildcards, attempt: attempt * 45
    log:
        "logs/pbgzip/post_gwascat/{sample}.log"
    wrapper:
        "/bio/compress/pbgzip"


######################
### VCF annotation ###
######################


module snpeff_meta:
    snakefile: "../../meta/bio/snpeff_annotate"
    config: config

use rule snpeff from snpeff_meta with:
    input:
        calls="{sample}.vcf.gz",
        calls_index="{sample}.vcf.gz.tbi"
        db=config["ref"]["snpeff"]


module snpsift:
    snakefile: "../../meta/bio/snpsift"
    config: config

use rule * from snpsift as snpsift_*
