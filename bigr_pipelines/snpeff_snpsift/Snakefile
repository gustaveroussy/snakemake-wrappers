import logging
import os
import pandas
import sys
from pathlib import Path

logging.basicConfig(
    filename="snakemake.snpeff_snpsift.log",
    filemode="w",
    level=logging.DEBUG
)

worflow_source_dir = Path(next(iter(workflow.get_sources()))).absolute().parent
common = str(worflow_source_dir / "../common/python")
sys.path.append(common)

from file_manager import *
from files_linker import *
from write_yaml import *
from messages import *
from snakemake.utils import min_version
min_version("6.0")

default_config = read_yaml(worflow_source_dir / "config.hg38.yaml")
configfile: get_config(default_config)
design = build_design(os.getcwd(), search_vcf_files)

from pathlib import Path

container: "docker://continuumio/miniconda3:4.4.10"
localrules: bigr_copy

samples_list = design["Sample_id"]

wildcard_constraints:
    sample = r"|".join(samples_list)

vcf_links = link_vcf(
    design.Sample_id,
    design.Upstream_file
)

last_vcf = (
    "bigr/cancer_gene_census/{sample}.vcf"
    if config["params"]["ncbi_build"] != "mm10"
    else "snpsift/dbsnp/{sample}.vcf"
)


rule all:
    input:
        calls=expand(
            "snpsift/fixed/{sample}.vcf.gz",
            sample=samples_list,
            index=["", ".tbi"]
        ),
        qc="multiqc/SnpEff_annotation.html",
        tsv=expand(
            "snpsift/extractFields/{sample}.tsv",
            sample=samples_list
        )
    message:
        "Finishing the annotation pipeline"

#################################
### FINAL VCF FILE INDEXATION ###
#################################

module compress_index_vcf_meta:
    snakefile: "../../meta/bio/compress_index_vcf/test/Snakefile"
    config: config


use rule * from compress_index_vcf_meta


# use rule pbgzip_compress from compress_index_vcf_meta with:
#     output:
#         protected("{tool}/{subcommand}/{sample}.vcf.gz")
#
#
# use rule tabix_index from compress_index_vcf_meta with:
#     output:
#         protected("{tool}/{subcommand}/{sample}.vcf.gz.tbi")
#     threads: 1


#####################
### Export to TSV ###
#####################

rule extractfields:
    input:
        call="snpsift/fixed/{sample}.vcf.gz",
        call_index=get_tbi("snpsift/fixed/{sample}.vcf.gz")
    output:
        tsv=protected("snpsift/extractFields/{sample}.tsv")
    message:
        "Making {wildcards.sample} annotated VCF readable"
    threads: 2
    resources:
        mem_mb=lambda wildcards, attempt: min(attempt * 4096, 15360),
        time_min=lambda wildcards, attempt: attempt * 20
    log:
        "logs/snpsift/extractAllFields/{sample}.log"
    params:
        extra="-s $'\\t' -e '.'"
    wrapper:
        "bio/snpsift/extractAllFields"


rule fix_vcf:
    input:
        vcf=last_vcf
    output:
        vcf=temp("snpsift/fixed/{sample}.vcf")
    message:
        "Removing empty fields, trailing ';' and non-canonical chromosomes "
        "for {wildcards.sample}"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1024,
        time_min=lambda wildcards, attempt: attempt * 15,
        tmpdir="tmp"
    log:
        "logs/bigr_scripts/fix_vcf/{sample}.log"
    params:
        default_chr=config["params"]["chr"],
        remove_non_conventional_chromosomes=True
    wrapper:
        "bio/BiGR/fix_vcf"


###############
### MultiQC ###
###############

rule multiqc:
    input:
        expand(
            "snpeff/report/{sample}.html",
            sample=samples_list
        ),
        expand(
            "snpeff/csvstats/{sample}.csv",
            sample=samples_list
        )
    output:
        report(
            "multiqc/SnpEff_annotation.html",
            caption="../common/reports/multiqc.rst",
            category="Quality Controls"
        )
    message:
        "Aggregating quality reports from SnpEff"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: min(attempt * 1536, 10240),
        time_min=lambda wildcards, attempt: attempt * 35
    log:
        "logs/multiqc.log"
    wrapper:
        "bio/multiqc"


##########################
### Custom annotations ###
##########################


rule cancer_gene_census_annotate:
    input:
        vcf="bigr/oncokb/{sample}.vcf",
        cgc=config["ref"]["cancer_census"]
    output:
        vcf=temp("bigr/cancer_gene_census/{sample}.vcf")
    message:
        "Adding CancerGeneCensus annotation in {wildcards.sample}"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1024 * 5,
        time_min=lambda wildcards, attempt: attempt * 25,
        tmpdir="tmp"
    log:
        "logs/bigr/cancer_gene_census_annotate/{sample}.log"
    wrapper:
        "bio/BiGR/cancer_gene_census_annotate"


rule oncokb_annotate:
    input:
        vcf="splice_ai/{sample}.vcf",
        oncokb=config["ref"]["oncokb"]
    output:
        vcf=temp("bigr/oncokb/{sample}.vcf")
    message:
        "Adding OncoKB annotation in {wildcards.sample}"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1024 * 6,
        time_min=lambda wildcards, attempt: attempt * 35,
        tmpdir="tmp"
    log:
        "logs/bigr/oncokb/{sample}.log"
    wrapper:
        "bio/BiGR/oncokb_annotate"


#####################
## MANE annotation ##
#####################


# Incomming ...


######################
## Revel annotation ##
######################

# Incomming ...


#######################
## Mistic annotation ##
#######################


# Incomming ...


##########################
## Splice AI annotation ##
##########################


rule splice_ai:
    input:
        vcf = "snpsift/clinvar/{sample}.vcf",
        fasta = config["ref"]["fasta"]
    output:
        vcf = temp("splice_ai/{sample}.vcf")
    message:
        "Adding Splice Variant annotation to {wildcards.sample}"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 2048 * 5,
        time_min=lambda wildcards, attempt: attempt * 60 * 1.5,
        tmpdir="tmp",
        gres="gpu:t4:1"
    params:
        annotation=config["params"].get("ncbi_build", "grch38").lower(),
        piped = True
    log:
        "logs/splice_ai/{sample}.log"
    wrapper:
        "bio/spliceai"


#########################
### snpeff annotation ###
#########################

snpeff_snpsift_config = {
    "ref": config["ref"],
    **config["snpeff_snpsift"]
}

module snpeff_meta:
    snakefile: "../../meta/bio/snpeff_annotate/test/Snakefile"
    config: snpeff_snpsift_config

use rule snpeff from snpeff_meta with:
    input:
        calls="data_input/calls/{sample}.vcf.gz",
        calls_index="data_input/calls/{sample}.vcf.gz.tbi",
        db=config["ref"]["snpeff"]


##########################
### snpsift annotation ###
##########################


module snpsift:
    snakefile: "../../meta/bio/snpsift/test/Snakefile"
    config: snpeff_snpsift_config

use rule * from snpsift


#################################################
### Gather files from iRODS or mounting point ###
#################################################

rule bigr_copy:
    output:
        "data_input/calls/{sample}.vcf.gz"
    message:
        "Getting {wildcards.sample} VCF file"
    threads: 1
    resources:
      mem_mb=lambda wildcards, attempt: min(attempt * 1024, 2048),
      time_min=lambda wildcards, attempt: attempt * 45,
    params:
        input=lambda wildcards, output: vcf_links[output[0]]
    log:
        "logs/bigr_copy/{sample}.log"
    wrapper:
        "bio/BiGR/copy"
