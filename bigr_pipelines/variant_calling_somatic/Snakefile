include: "rules/000.common.smk"


rule all:
    input:
        facets=expand(
            "facets/{sample}/{sample}.{ext}",
            sample=design["Sample_id"].tolist(),
            ext=["vcf.gz", "cnv.png", "cov.pdf", "spider.pdf", "csv.gz"],
        ),
        calls=expand("snpsift/fixed/{sample}.vcf.gz", sample=design["Sample_id"]),
        calls_index=expand(
            "snpsift/fixed/{sample}.vcf.gz.tbi", sample=design["Sample_id"]
        ),
        table=expand("snpsift/extractFields/{sample}.tsv", sample=design["Sample_id"]),
        r=expand("msisensor/{sample}/{sample}.msi", sample=design["Sample_id"].tolist()),
        qc="multiqc/variant_calling_somatic.html",
        results=expand(
            "pandas/filter/{how}/dp{dp}/{sample}.dp{dp}.tsv",
            how=["all", "census_only", "oncokb_only"]
            if config.get("ANMO", False) is True
            else ["all"],
            sample=design["Sample_id"].tolist(),
            dp=["10", "40", "60"],
        ),
        results_xl=expand(
            "pandas/filter/{how}/dp{dp}/{sample}.dp{dp}.xlsx",
            how=["all", "census_only", "oncokb_only"]
            if config.get("ANMO", False) is True
            else ["all"],
            sample=design["Sample_id"].tolist(),
            dp=["10", "40", "60"],
        ),
        tmb="TMB.tsv",
    output:
        directory("results_to_upload"),
    message:
        "Finishing the WES Somatic Variant Calling"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 768,
        time_min=lambda wildcards, attempt: attempt * 45,
        tmpdir="tmp",
    log:
        "logs/resultdir.log",
    params:
        mk="--parents --verbose",
        rs="--checksum --verbose --human-readable",
        dirlist=" ".join(
            [
                f"results_to_upload/{content}"
                for content in ["msi", "tmb", "vcf", "tsv", "xlsx", "cnv", "qc"]
            ]
        ),
    shell:
        "mkdir {params.mk} {params.dirlist} > {log} 2>&1 && "
        "rsync {params.rs} {input.msisensor} {output}/msi/ >> {log} 2>&1 && "
        "rsync {params.rs} {input.results} {output}/tsv/ >> {log} 2>&1 && "
        "rsync {params.rs} {input.results} {output}/xlsx/ >> {log} 2>&1 && "
        "rsync {params.rs} {input.facets} {output}/cnv/ >> {log} 2>&1 && "
        "rsync {params.rs} {input.calls} {input.calls_index} {output}/vcf/ >> {log} 2>&1 && "
        "rsync {params.rs} {input.html} {input.qc} {output}/qc/ >> {log} 2>&1 "


#########################
### ANMO-like filters ###
#########################


include: "rules/pandas.smk"


##################
### VCF to MAF ###
##################


include: "rules/018.vcf2tsv.smk"
include: "rules/023.vcfpostprocess.smk"


#################
### Gather QC ###
#################


include: "rules/016.mapping_qc.smk"
include: "rules/017.multiqc.smk"


######################
### MSI sensor pro ###
######################


include: "rules/022.msisensor.smk"


###########
### TMB ###
###########


include: "rules/021.tmb.smk"


##################
### CNV Facets ###
##################


include: "rules/020.cnv_facets.smk"


###########################
### VCF FILE INDEXATION ###
###########################


include: "rules/019.tabix.smk"


######################
### VCF annotation ###
######################


include: "010.snpeff.smk"
include: "012.snpsift.smk"
include: "015.occurence.smk"
include: "011.spliceai.smk"
include: "013.vcftools.smk"
include: "014.bigr.annot.smk"


#####################################
### Merge variant calling results ###
#####################################

# module metacaller_somatic_meta:
#     snakefile: "../../meta/bio/meta_caller_somatic/test/Snakefile"
#     config: {"genome": config["ref"]["fasta"], "bed": config["ref"]["capture_kit_bed"]}
#
#
# use rule * from metacaller_somatic_meta as *


############################################################################
### Correcting Mutect2 :                                                 ###
### AS_FilterStatus: Number=1 and not Number=A which violates VCF format ###
############################################################################

###############################
### Variant calling Mutect2 ###
###############################


include: "009.gatk.mutect2.smk"


################################
### Variant Calling Varscan2 ###
################################


include: "008.varscan.smk"


##############################
### GATK BAM RECALIBRATION ###
##############################


include: "007.gatk.recal.smk"


#####################
### Deduplicating ###
#####################


include: "rules/006.sambamba.markdup.smk"


# Filter a bam over the capturekit bed file


include: "rules/005.samtools.filter.smk"


###################
### BWA MAPPING ###
###################


include: "003.bwa.fixmate.smk"


############################
### FASTP FASTQ CLEANING ###
############################


include: "rules/002.fastp.trimming.smk"


#################################################
### Gather files from iRODS or mounting point ###
#################################################


include: "rules/001.bigr_copy.smk"


###########################
### Datasets indexation ###
###########################


include: "004.sambamba.index.smk"
