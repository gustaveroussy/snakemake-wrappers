default_config_mutect2_somatic = {
    # Your genome sequence
    "genome": "reference/genome.fasta",
    # Path to a VCF containing AF fields
    "known": "reference/dbsnp.vcf.gz",
    # Path to a BED containing the kit's catpured regions
    "bed": "reference/regions.bed",
    # Path to dbSNP vcf, its tbi should be aside.
    "dbsnp": "reference/dbsnp.vcf.gz"
}

try:
    if config == dict():
        config = default_config_mutect2_somatic
except NameError:
    config = default_config_mutect2_somatic


def get_fai(genome_path: str) -> str:
    return genome_path + ".fai"

def get_dict(genome_path: str) -> str:
    return ".".join(genome_path.split(".")[:-1]) + ".dict"

def get_tbi(vcf_path: str) -> str:
    return vcf_path + ".tbi"

def get_bai(bam_path: str) -> str:
    return bam_path + ".bai"


###########################
### Filter Mutect calls ###
###########################

rule gatk_filter_mutect_calls:
    input:
        vcf="mutect2/call/{sample}.vcf.gz",
        ref=config["genome"],
        ref_index=get_fai(config["genome"]),
        ref_dict=get_dict(config["genome"]),
        bam="samtools/sort/{sample}_{status}.bam",
        bam_index=get_bai("samtools/sort/{sample}_{status}.bam"),
        f1r2="mutect2/f1r2/{sample}.tar.gz",
        contamination="summary/{sample}_calculate_contamination.table"
    output:
        vcf=temp("mutect2/filter/{sample}.vcf.gz")
    message:
        "Filtering GATK calls on {wildcards.sample}"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: min(attempt * 5120, 15360),
        time_min=lambda wildcards, attempt: attempt * 35
    params:
        extra=""
    log:
        "logs/mutect2/filter/{sample}.log"
    wrapper:
        "/bio/gatk/filtermutectcalls"


###########################################
### Estimate cross-sample contamination ###
###########################################


"""
Estimate possible contaminations
"""
rule calculate_tumor_contamination:
    input:
        summary="gatk/getpileupsummaries/{sample}_tumor_getpileupsummaries.table",
        normal="gatk/getpileupsummaries/{sample}_normal_getpileupsummaries.table",
    output:
        table=temp("summary/{sample}_calculate_contamination.table"),
        segmentation=temp("summary/{sample}_segments.table")
    group:
        "Contamination_Estimate"
    message:
        "Summarizing read support for known variant sites to further "
        "estimate contamination on {wildcards.sample}"
        " (on tumor only)"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: min(attempt * 5120, 15360),
        time_min=lambda wildcards, attempt: attempt * 35
    log:
        "logs/gatk/CalculateContamination/{sample}.log"
    wrapper:
        "/bio/gatk/calculatecontamination"


"""
Summarize the read support over known variants
"""
rule get_pileup_summaries:
    input:
        bam="samtools/sort/{sample}_{status}.bam",
        bam_index=get_bai("samtools/sort/{sample}_{status}.bam"),
        intervals=config["bed"],
        variants=config["known"],
        variants_index=get_tbi(config["known"])
    output:
        table=temp(
            "gatk/getpileupsummaries/{sample}_{status}_getpileupsummaries.table"
        )
    group:
        "Contamination_Estimate"
    message:
        "Summarizing read support for known variant sites to further "
        "estimate contamination on {wildcards.sample}"
        " ({wildcards.status})"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: min(attempt * 5120, 15360),
        time_min=lambda wildcards, attempt: attempt * 35
    log:
        "logs/gatk/GetPileupSummaries/{sample}.{status}.log"
    wrapper:
        "/bio/gatk/getpileupsummaries"


######################
### Actual Calling ###
######################
"""
This rule calls somatic variants with GATK Mutect2
"""
rule mutect2_somatic:
    input:
        fasta=config["genome"],
        fasta_index=get_fai(config["genome"]),
        fasta_dict=get_dict(config["genome"]),
        map="samtools/sort/{sample}_normal.bam",
        map_index=get_bai("samtools/sort/{sample}_normal.bam"),
        tumor="samtools/sort/{sample}_tumor.bam",
        tumor_index=get_bai("samtools/sort/{sample}_tumor.bam"),
        germline=config["known"],
        germline_tbi=get_tbi(config["known"]),
        intervals=config["bed"]
    output:
        vcf=temp("mutect2/call/{sample}.vcf.gz"),
        f1r2=temp("mutect2/f1r2/{sample}.tar.gz"),
        bam=temp("mutect2/bam/{sample}.bam")
    message:
        "Calling variants on {wildcards.sample} with GATK Mutect2"
    threads: 4
    resources:
        time_min=lambda wildcards, attempt: attempt * 45,
        mem_mb=lambda wildcards, attempt: min(attempt * 8192, 20480)
    params:
        extra=(
            "--max-reads-per-alignment-start 0 "
            "--tumor-sample Mutect2_{sample}_tumor "
            "--normal Mutect2_{sample}_normal "
            "--disable-read-filter MateOnSameContigOrNoMappedMateReadFilter "
        )
    log:
        "logs/gatk/mutect2/call/{sample}.log"
    wrapper:
        "/bio/gatk/mutect"


################################
### Building Panel of Normal ###
################################

rule gatk_crate_stomatic_pon:
    input:



rule gatk_genomics_db_import:
    input:
        ref=config["genome"],
        ref_index=get_fai(config["genome"]),
        ref_dict=get_dict(config["genome"]),
        bams=expand(
            "samtools/sort/{sample}_normal.bam",
            sample=config["sample_list"]
        )
        bams_index=expand(
            get_bai("samtools/sort/{sample}_normal.bam"),
            sample=config["sample_list"]
        ),
        gvcfs=expand(
            "mutect2/pon_call/{sample}.vcf.gz",
            sample=config["sample_list"]
        ),
        gvcfs_tbi=expand(
            get_tbi("mutect2/pon_call/{sample}.vcf.gz"),
            sample=config["sample_list"]
        ),
        intervals=config["bed"]
    output:
        genomicsdb=temp("gatk/genomicsdb/pon_db")
    message: "Building PoN database"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: min(attempt * 5120, 15360),
        time_min=lambda wildcards, attempt: attempt * 35
    params:
        extra="",
        db_action="create",
        intervals=lambda wildcards, intput: input.intervals
    log:
        "logs/gatk/genomicsdbimport/pon.log"
    wrapper:
        "/bio/gatk/genomicsdbimport"


use rule gatk_mutect2_somatic as gatk_mutect2_germline_normal:
    input:
        fasta=config["genome"],
        fasta_index=get_fai(config["genome"]),
        fasta_dict=get_dict(config["genome"]),
        map="samtools/sort/{sample}_normal.bam",
        map_index=get_bai("samtools/sort/{sample}_normal.bam"),
        germline=config["known"],
        germline_tbi=get_tbi(config["known"]),
        intervals=config["bed"]
    output:
        vcf=temp("mutect2/pon_call/{sample}.vcf.gz")
        )
    params:
        extra=(
            "--max-reads-per-alignment-start 0 "
            "--normal Mutect2_{sample}_normal "
            "--disable-read-filter MateOnSameContigOrNoMappedMateReadFilter "
        )
    log:
        "logs/gatk/mutect2/pon_call/{sample}.log"
