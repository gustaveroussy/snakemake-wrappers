defualt_config_bwa_fixmate = {
    "threads": 20,
    "genome": "sequence/genome.fasta"
}

try:
    if config == dict():
        config = defualt_config_bwa_fixmate
except NameError:
    config = defualt_config_bwa_fixmate

"""
This rule indexes the bam file since almost all downstream tools requires it
"""
rule sambamba_index:
    input:
        "sambamba/sort/{sample}.bam"
    output:
        temp("sambamba/sort/{sample}.bam.bai")
    message: "Indexing mapped reads of {wildcards.sample}"
    threads: 5
    resources:
        mem_mb=1536,
        time_min=lambda wildcards, attempt: attempt * 45,
        tmpdir="tmp"
    log:
        "logs/sambamba/index/{sample}.log"
    wrapper:
        "bio/sambamba/index"


"""
This rule sorts reads by position for further analyses.
This rule is shadowed in order to automatically delete undetermined number of
temporary files on error, which leads retry to fail
"""
rule sambamba_sort_coordinate:
    input:
        mapping="samtools/fixmate/{sample}.bam"
    output:
        mapping=temp("sambamba/sort/{sample}.bam"),
    message:
        "Sorting {wildcards.sample} reads by positions"
    threads: 20
    resources:
        mem_mb=lambda wildcards, threads: threads * 1792,
        time_min=lambda wildcards, attempt: attempt * 90,
        tmpdir="tmp"
    shadow: "minimal"
    log:
        "logs/sambamba/sort/{sample}.log"
    wrapper:
        "bio/sambamba/sort"


"""
BWA sometimes fails to annotate read mates correctly. We fix this behaviour
with the rule below.
"""
rule samtools_fixmate:
    input:
        "bwa_mem2/mem/{sample}.bam"
    output:
        temp("samtools/fixmate/{sample}.bam")
    message: "Fixing mate annotation on {wildcards.sample} with Samtools"
    threads: config.get("threads", 20)
    resources:
        mem_mb = (
            lambda wildcards, attempt: min(attempt * 2048 + 2048, 8192)
        ),
        time_min = (
            lambda wildcards, attempt: min(attempt * 45, 180)
        ),
        tmpdir="tmp"
    params:
        config.get("fixmate_extra", "-cmr")
    log:
        "logs/samtools/fixmate/{sample}.log"
    wrapper:
        "bio/samtools/fixmate"


"""
This rule maps your reads against the indexed reference with BWA.
"""
rule bwa_mem:
    input:
        reads = expand(
            "reads/{sample}.{stream}.fq.gz",
            stream=["1", "2"],
            allow_missing=True
        ),
        index=multiext(
            "bwa_mem2/index/genome", ".0123", ".amb", ".ann", ".pac"
        )
    output:
        temp("bwa_mem2/mem/{sample}.bam")
    message: "Mapping {wildcards.sample} with BWA"
    threads: config.get("threads", 20)
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 6144 + 61440,
        time_min=lambda wildcards, attempt: attempt * 120,
        tmpdir="tmp"
    shadow: "shallow"
    params:
        index=lambda wildcards, input: os.path.splitext(input["index"][0])[0],
        extra=r"-R '@RG\tID:{sample}\tSM:{sample}\tPU:{sample}\tPL:ILLUMINA\tCN:IGR\tDS:WES\tPG:BWA-MEM2' -M -A 2 -E 1",
        sort="samtools",         # We chose Samtools to sort by queryname
        sort_order="queryname",  # Queryname sort is needed for a fixmate
        sort_extra="-m 1536M"     # We extand the sort buffer memory
    log:
        "logs/bwa_mem2/mem/{sample}.log"
    wrapper:
        "bio/bwa-mem2/mem"


"""
Index your reference genome with BWA.

This rule is cached since it should be used once per reference genome
"""
rule bwa_index:
    input:
        config["genome"]
    output:
        multiext(
            "bwa_mem2/index/genome", ".0123", ".amb", ".ann", ".pac"
        )
    message: "Indexing reference genome with BWA"
    cache: True
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 6144 + 66560,
        time_min=lambda wildcards, attempt: attempt * 120,
        tmpdir="tmp"
    params:
        prefix=lambda wildcards, output: os.path.splitext(output[0])[0]
    log:
        "logs/bwa_mem2/index/genome.log"
    wrapper:
        "bio/bwa-mem2/index"
