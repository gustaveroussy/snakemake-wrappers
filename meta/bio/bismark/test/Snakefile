default_config_bismark = {
    "genome": "/path/to/fasta.fa"
}


rule bismark_reports:
    input:
        alignment_report="bismark/bams/{sample}_report.txt",
        nucleotide_report="bismark/bams/{sample}.nucleotide_stats.txt",
        dedup_report="bismark/deduplicated/{sample}.deduplication_report.txt",
        mbias_report="bismark/meth/{sample}.M-bias.txt",
        splitting_report="bismark/meth/{sample}_splitting_report.txt"
    output:
        html="bismark/report/{sample}.html"
    message:
        "Building HTML report for {wildcards.sample}"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1024,
        time_min=lambda wildcards, attempt: attempt * 15,
        tmpdir="tmp"
    params:
        skip_optional_reports=False
    log:
        "logs/bismark/report/{sample}.log"
    wrapper:
        "bio/bismark/bismark2report"


rule bismark_methylation_extractor:
    input:
        "bismark/deduplicated/{sample}.bam"
    output:
        mbias_r1="bismark/meth/{sample}.M-bias_R1.png",
        mbias_r2="bismark/meth/{sample}.M-bias_R2.png",
        mbias_report="bismark/meth/{sample}.M-bias.txt",
        splitting_report="bismark/meth/{sample}_splitting_report.txt",
        methylome_CpG_cov="bismark/meth_cpg/{sample}.bismark.cov.gz",
        methylome_CpG_mlevel_bedGraph="bismark/meth_cpg/{sample}.bedGraph.gz",
        read_base_meth_state_cpg="bismark/meth/CpG_context_{sample}.txt.gz",
        read_base_meth_state_chg="bismark/meth/CHG_context_{sample}.txt.gz",
        read_base_meth_state_chh="bismark/meth/CHH_context_{sample}.txt.gz"
    message: "Extracting methylation on {wildcards.sample}"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1024,
        time_min=lambda wildcards, attempt: attempt * 15,
        tmpdir="tmp"
    log:
        "logs/bismark/meth/{sample}.log"
    params:
        output_dir="bismark/meth",
        extra="--gzip --comprehensive --bedGraph"
    wrapper:
        "bio/bismark/bismark_methylation_extractor"


rule bismark_deduplicate:
    input:
        "bismark/bams/{sample}.bam",
    output:
        bam=temp("bismark/deduplicated/{sample}.bam"),
        report="bismark/deduplicated/{sample}.deduplication_report.txt",
    message:
        "Deduplicating {wildcards.sample} mapping"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1024,
        time_min=lambda wildcards, attempt: attempt * 15,
        tmpdir="tmp"
    log:
        "logs/bismark/deduplicated/{sample}.log"
    params:
        ""
    wrapper:
        "bio/bismark/deduplicate_bismark"


rule bismark_mapping:
    input:
        genome=config["genome"],
        fq_1="reads/{sample}.1.fq.gz",
        fq_2="reads/{sample}.2.fq.gz",
        bismark_indexes_dir="biskmark/index/Bisulfite_Genome",
        genomic_freq="biskmark/index/genomic_nucleotide_frequencies.txt"
    output:
        bam=temp("bismark/bams/{sample}.bam"),
        report="bismark/bams/{sample}_report.txt",
        nucleotide_stats=temp("bismark/bams/{sample}.nucleotide_stats.txt"),
        bam_unmapped_1=temp("bismark/bams/{sample}_unmapped_reads_1.fq.gz"),
        bam_unmapped_2=temp("bismark/bams/{sample}_unmapped_reads_2.fq.gz"),
        ambiguous_1=temp("bismark/bams/{sample}_ambiguous_reads_1.fq.gz"),
        ambiguous_2=temp("bismark/bams/{sample}_ambiguous_reads_2.fq.gz")
    message:
        "Mapping {wildcards.sample} with Bismark"
    threads: 20
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1024,
        time_min=lambda wildcards, attempt: attempt * 15,
        tmpdir="tmp"
    log:
        "logs/bismark/mapping/{sample}.log"
    params:
        extra=lambda s: f"--fastq --bam --gzip --phred33-quals --ambiguous --unmapped --nucleotide_coverage --rg_tag '@RG\tID:{w.sample}\tSM:{w.sample}\tPU:{w.sample}\tPL:ILLUMINA\tCN:IGR\tDS:MiraSeq\tPG:BOWTIE2'",
        basename="{sample}"
    wrapper:
        "bio/bismark/bismark"


rule bismark_genome_preparation:
    input:
        config["genome"]
    output:
        temp(directory("biskmark/index/Bisulfite_Genome")),
        temp("biskmark/index/genomic_nucleotide_frequencies.txt")
    message: "Indexing genome with Bismark"
    threads: 20
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 1024,
        time_min=lambda wildcards, attempt: attempt * 15,
        tmpdir="tmp"
    log:
        "logs/bismark/genome_preparation.log"
    params:
        "--genomic_composition"
    wrapper:
        "bio/bismark/bismark_genome_preparation"
