.. _`bio/bcftools/view`:

BCFTOOLS VIEW
=============

View vcf/bcf file in a different format. For more information see `BCFtools documentation <https://www.htslib.org/doc/bcftools.html#view>`_.


Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule bcf_to_vcf:
        input:
            bcf="{prefix}.bcf"
        output:
            vcf="{prefix}.vcf"
        params:
            ""  # optional parameters for bcftools view (except -o)
        log:
            "logs/{prefix}.log"
        wrapper:
            "0.68.0-353-g70fc74bae/bio/bcftools/view"

Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bcftools==1.11``




Authors
-------

* Johannes Köster


Code
----

.. code-block:: python

    __author__ = "Johannes Köster"
    __copyright__ = "Copyright 2016, Johannes Köster"
    __email__ = "koester@jimmy.harvard.edu"
    __license__ = "MIT"


    from snakemake.shell import shell
    log = snakemake.log_fmt_shell(stdout=True, stderr=True)

    extra = snakemake.params.get("extra", "")
    log = snakemake.log_fmt_shell(stdout=True, stderr=True)

    extra = snakemake.params[0]
    output_file = snakemake.output[0]
    if output_file.endswith(".bcf"):
        extra += " --output-type b "
    elif output_file.endswith(".vcf.gz"):
        extra += " --output-type z "
    elif output_file.endswith(".vcf"):
        extra += " --output-type v "
    else:
        raise ValueError(
            "Output file extension should be one of: vcf, bcf, vcf.gz"
        )

    shell(
        "bcftools view {extra} --threads {snakemake.threads} {snakemake.input} "
        "-o {snakemake.output} {log}"
    )
