.. _`fastq_screen`:

FASTQ_SCREEN
============

`fastq_screen <http://www.bioinformatics.babraham.ac.uk/projects/fastq_screen>`_
screens a library of sequences in FASTQ format against a set of sequence
databases so you can see if the composition of the library matches with what
you expect.

This wrapper allows the configuration to be passed as a filename or as
a dictionary in the rule's  `params.fastq_screen_config` of the rule. So the
following configuration file::

  DATABASE	ecoli	/data/Escherichia_coli/Bowtie2Index/genome	BOWTIE2
  DATABASE	ecoli	/data/Escherichia_coli/Bowtie2Index/genome	BOWTIE
  DATABASE	hg19	/data/hg19/Bowtie2Index/genome	BOWTIE2
  DATABASE	mm10	/data/mm10/Bowtie2Index/genome	BOWTIE2
  BOWTIE	/path/to/bowtie
  BOWTIE2	/path/to/bowtie2

becomes::

  fastq_screen_config = {
   'database': {
     'ecoli': {
       'bowtie2': '/data/Escherichia_coli/Bowtie2Index/genome',
       'bowtie': '/data/Escherichia_coli/BowtieIndex/genome'},
     'hg19': {
       'bowtie2': '/data/hg19/Bowtie2Index/genome'},
     'mm10': {
       'bowtie2': '/data/mm10/Bowtie2Index/genome'}
   },
   'aligner_paths': {'bowtie': 'bowtie', 'bowtie2': 'bowtie2'}
  }

By default, the wrapper will use bowtie2 as the aligner and a subset of 100000
reads.  These can be overridden using ``params.aligner`` and ``params.subset``
respectively. Furthermore, `params.extra` can be used to pass additional
arguments verbatim to ``fastq_screen``, for example ``extra="--illumina1_3"`` or
``extra="--bowtie2 '--trim5=8'"``.






Example
-------

This meta-wrapper can be used in the following way:

.. code-block:: python

    rule fastq_screen:
        input:
            "samples/{sample}.fastq"
        output:
            txt="qc/{sample}.fastq_screen.txt",
            png="qc/{sample}.fastq_screen.png"
        params:
            fastq_screen_config="fastq_screen.conf",
            subset=100000,
            aligner='bowtie2'
        threads: 8
        wrapper:
            "0.66.0-225-gb77af9ed/bio/fastq_screen"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.



Notes
-----

* ``fastq_screen`` hard-codes the output filenames. This wrapper moves the
  hard-coded output files to those specified by the rule.
* While the dictionary form of ``fastq_screen_config`` is convenient, the
  unordered nature of the dictionary may cause ``snakemake --list-params-changed``
  to incorrectly report changed parameters even though the contents remain the
  same. If you plan on using ``--list-params-changed`` then it will be better to
  write a config file and pass that as `fastq_screen_config`. This problem will
  disappear with Python 3.6.
* When providing the dictionary form of ``fastq_screen_config``, the wrapper will
  write a temp file using Python's ``tempfile`` module. To control the temp file
  directory, make sure the `$TMPDIR` environmental variable is set (see the `tempfile
  docs <https://docs.python.org/3/library/tempfile.html#tempfile.mkstemp>`_) for
  details). One way of doing this is by adding  something like
  ``shell.prefix("export TMPDIR=/scratch; ")`` to the snakefile calling this
  wrapper.




Authors
-------


* Ryan Dale



Code
----


