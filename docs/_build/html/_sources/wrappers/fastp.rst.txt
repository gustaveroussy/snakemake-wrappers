.. _`bio/fastp`:

FASTP
=====

trim and QC fastq reads with fastp


Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule fastp_se:
        input:
            sample=["reads/se/{sample}.fastq"]
        output:
            trimmed="trimmed/se/{sample}.fastq",
            html="report/se/{sample}.html",
            json="report/se/{sample}.json"
        log:
            "logs/fastp/se/{sample}.log"
        params:
            adapters="--adapter_sequence ACGGCTAGCTA",
            extra=""
        threads: 1
        wrapper:
            "0.72.0-574-gb9a1b13c8/bio/fastp"


    rule fastp_pe:
        input:
            sample=["reads/pe/{sample}.1.fastq", "reads/pe/{sample}.2.fastq"]
        output:
            trimmed=["trimmed/pe/{sample}.1.fastq", "trimmed/pe/{sample}.2.fastq"],
            html="report/pe/{sample}.html",
            json="report/pe/{sample}.json"
        log:
            "logs/fastp/pe/{sample}.log"
        params:
            adapters="--adapter_sequence ACGGCTAGCTA --adapter_sequence_r2 AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC",
            extra=""
        threads: 2
        wrapper:
            "0.72.0-574-gb9a1b13c8/bio/fastp"

    rule fastp_pe_wo_trimming:
        input:
            sample=["reads/pe/{sample}.1.fastq", "reads/pe/{sample}.2.fastq"]
        output:
            html="report/pe_wo_trimming/{sample}.html",
            json="report/pe_wo_trimming/{sample}.json"
        log:
            "logs/fastp/pe_wo_trimming/{sample}.log"
        params:
            extra=""
        threads: 2
        wrapper:
            "0.72.0-574-gb9a1b13c8/bio/fastp"

Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``fastp=0.20``




Authors
-------

* Sebastian Kurscheid (sebastian.kurscheid@unibas.ch)


Code
----

.. code-block:: python

    __author__ = "Sebastian Kurscheid"
    __copyright__ = "Copyright 2019, Sebastian Kurscheid"
    __email__ = "sebastian.kurscheid@anu.edu.au"
    __license__ = "MIT"

    from snakemake.shell import shell

    extra = snakemake.params.get("extra", "")
    adapters = snakemake.params.get("adapters", "")
    log = snakemake.log_fmt_shell(stdout=True, stderr=True)

    n = len(snakemake.input.sample)
    assert (
        n == 1 or n == 2
    ), "input->sample must have 1 (single-end) or 2 (paired-end) elements."

    if n == 1:
        reads = "--in1 {}".format(snakemake.input.sample)
    else:
        reads = "--in1 {} --in2 {}".format(*snakemake.input.sample)

    trimmed_paths = snakemake.output.get("trimmed", None)
    if trimmed_paths is not None:
        if n == 1:
            trimmed = "--out1 {}".format(snakemake.output.trimmed)
        else:
            trimmed = "--out1 {} --out2 {}".format(*snakemake.output.trimmed)
    else:
        trimmed = ""

    html = "--html {}".format(snakemake.output.html)
    json = "--json {}".format(snakemake.output.json)

    shell(
        "(fastp --thread {snakemake.threads} "
        "{extra} "
        "{adapters} "
        "{reads} "
        "{trimmed} "
        "{json} "
        "{html} ) {log}"
    )
