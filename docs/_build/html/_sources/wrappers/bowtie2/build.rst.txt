.. _`Bowtie2 build`:

BOWTIE2 BUILD
=============

Index genomes with Bowtie2-build



Software dependencies
---------------------


* bowtie2=2.4.1




Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_bowtie2_build:
        input:
            fasta = "genome.fasta"
        output:
            "bwt2_index/genome.1.bt2"
        params:
            # The following parameter is optional:
            # if a path to one of the files created in index is provided,
            # then the wrapper can guess the prefix itself.
            prefix = "bwt2_index/genome"
        wrapper:
            "0.66.0-280-g9f0281de/bio/bowtie2/build"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.



Notes
-----

If sequence are not provided as a fasta-formatted file, then they shall be given as parameters.




Authors
-------


* Thibault Dayris



Code
----

.. code-block:: python

    """Snakemake wrapper for bowtie2 build"""

    __author__ = "Thibault Dayris"
    __copyright__ = "Copyright 2020"
    __email__ = "koester@jimmy.harvard.edu"
    __license__ = "MIT"


    from snakemake.shell import shell
    from os.path import splitext

    extra = snakemake.params.get("extra", "")
    log = snakemake.log_fmt_shell(stdout=True, stderr=True)

    input = ""
    if "fasta" in snakemake.input.keys():
        input = "-f {}".format(snakemake.input["fasta"])
    elif "fasta" in snakemake.params.keys():
        input = "-c {}".format(snakemake.params["fasta"])
    else:
        raise ValueError(
            "Input sequence could not be found."
        )

    prefix = "bwt2_index"
    if "prefix" in snakemake.params.keys():
        prefix = snakemake.params["prefix"]


    shell(
        " bowtie2-build "
        " {input} "
        " {prefix} "
        " --threads {snakemake.threads} "
        " {extra} "
        " {log} "
    )
