.. _`bio/sambamba/view`:

SAMBAMBA VIEW
=============

Filter and/or view BAM files. See details `here https://lomereiter.github.io/sambamba/docs/sambamba-view.html`_

**URL**: 

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule sambamba_view:
        input:
            "mapped/{sample}.bam"
        output:
            "mapped/{sample}.filtered.bam"
        params:
            extra="-f bam -F 'mapping_quality >= 50'"  # optional parameters
        log:
            "logs/sambamba-view/{sample}.log"
        threads: 8
        wrapper:
            "0.77.0-1034-gee6c61611/bio/sambamba/view"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``sambamba==0.8.0``

Input/Output
------------
**Input:**

* bam/sam file

**Output:**

* (filtered) bam/sam file





Authors
-------

* Jan Forster


Code
----

.. code-block:: python

    __author__ = "Jan Forster"
    __copyright__ = "Copyright 2021, Jan Forster"
    __email__ = "j.forster@dkfz.de"
    __license__ = "MIT"


    import os

    from snakemake.shell import shell

    in_file = snakemake.input[0]
    extra = snakemake.params.get("extra", "")
    log = snakemake.log_fmt_shell(stdout=False, stderr=True)

    if in_file.endswith(".sam") and ("-S" not in extra or "--sam-input" not in extra):
        extra += " --sam-input"

    shell(
        "sambamba view {extra} -t {snakemake.threads} "
        "{snakemake.input[0]} > {snakemake.output[0]} "
        "{log}"
    )
