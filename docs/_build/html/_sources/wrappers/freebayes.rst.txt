.. _`freebayes`:

FREEBAYES
=========

Call small genomic variants with freebayes.



Software dependencies
---------------------


* freebayes ==1.3.1

* bcftools ==1.10

* parallel ==20190522

* bedtools >=2.29




Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule freebayes:
        input:
            ref="genome.fasta",
            # you can have a list of samples here
            samples="mapped/{sample}.bam"
            # optional BED file specifying chromosomal regions on which freebayes 
            # should run, e.g. all regions that show coverage
            #regions="/path/to/region-file.bed"
        output:
            "calls/{sample}.vcf"  # either .vcf or .bcf
        log:
            "logs/freebayes/{sample}.log"
        params:
            extra="",         # optional parameters
            chunksize=100000  # reference genome chunk size for parallelization (default: 100000)
        threads: 2
        wrapper:
            "0.51.3-78-gb0b606f9/bio/freebayes"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.




Authors
-------


* Johannes Köster

* Felix Mölder



Code
----

.. code-block:: python

    __author__ = "Johannes Köster, Felix Mölder"
    __copyright__ = "Copyright 2017, Johannes Köster"
    __email__ = "johannes.koester@protonmail.com, felix.moelder@uni-due.de"
    __license__ = "MIT"


    from snakemake.shell import shell

    shell.executable("bash")

    log = snakemake.log_fmt_shell(stdout=False, stderr=True)

    params = snakemake.params.get("extra", "")

    pipe = ""
    if snakemake.output[0].endswith(".bcf"):
        pipe = "| bcftools view -Ob -"

    if snakemake.threads == 1:
        freebayes = "freebayes"
    else:
        chunksize = snakemake.params.get("chunksize", 100000)
        regions = "<(fasta_generate_regions.py {snakemake.input.ref}.fai {chunksize})".format(
            snakemake=snakemake, chunksize=chunksize
        )
        if snakemake.input.get("regions", ""):
            regions = (
                "<(bedtools intersect -a "
                "<(sed \"s/:\([0-9]*\)-\([0-9]*\)$/$(printf '\\t')\\1$(printf '\\t')\\2/g\" "
                "{regions}) -b {snakemake.input.regions} | "
                "sed \"s/$(printf '\\t')\([0-9]*\)$(printf '\\t')\([0-9]*\)$/:\\1-\\2/g\")"
            ).format(regions=regions, snakemake=snakemake)
        freebayes = ("freebayes-parallel {regions} {snakemake.threads}").format(
            snakemake=snakemake, regions=regions
        )

    shell(
        "({freebayes} {params} -f {snakemake.input.ref}"
        " {snakemake.input.samples} {pipe} > {snakemake.output[0]}) {log}"
    )
