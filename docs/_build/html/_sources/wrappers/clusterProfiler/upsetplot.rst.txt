.. _`bio/clusterProfiler/upsetplot`:

UPSET PLOT
==========

Draw a heatmap from enriched terms and GSEA


Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_enrich_upsetplot:
        input:
            rds = "enriched.RDS"
        output:
            png = "upsetplot.png"
        params:
            upsetplot_extra = "n = 5"
        wrapper:
            "0.72.0-512-gb940f0d55/bio/clusterProfiler/upsetplot"

Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bioconda:bioconductor-enrichplot=1.4.0``
* ``bioconda:bioconductor-clusterprofiler=3.12.0``

Input/Output
------------
**Input:**

* A RDS-formatted object containing enriched terms

**Output:**

* A upsetplot of enriched terms as a PNG image



Notes
-----

Works on enrichment objects only.

Parameters:
  * upsetplot_extra: Extra parameters for upsetplot, besides "x"



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: R

    #!/usr/bin/R

    # This script takes an enriched terms object from clusterProfiler
    # and builds a upsetplot of most enriched terms or provided list of
    # pathways

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    # Sink the stderr and stdout to the snakemake log file
    # https://stackoverflow.com/a/48173272
    log.file<-file(snakemake@log[[1]],open="wt");
    base::sink(log.file);
    base::sink(log.file,type="message");

    # Handle enrichment
    base::library(package = "clusterProfiler", quietly = TRUE);
    # Handle graphics
    # base::library(package = "Cairo", quietly = TRUE);
    base::library(package = "enrichplot", quietly = TRUE);

    enriched <- base::readRDS(
      file = base::as.character(x = snakemake@input[["rds"]])
    );

    fc <- NULL;
    if ("gene_list" %in% base::names(snakemake@input)) {
      fc <- readRDS(
        file = base::as.character(snakemake@input[["gene_list"]])
      );
    }

    upsetplot_extra <- "x = enriched";
    if ("upsetplot_extra" %in% base::names(snakemake@params)) {
      upsetplot_extra <- base::paste(
        upsetplot_extra,
        snakemake@params[["upsetplot_extra"]],
        sep = ", "
      );
    }
    base::message("Libraries and input data loaded");

    # Build command line
    command <- base::paste0(
      "enrichplot::upsetplot(",
      upsetplot_extra,
      ")"
    );
    base::message(command);

    print(head(enriched))

    # Build plot
    png(
      filename = snakemake@output[["png"]],
      width = 1024,
      height = 768,
      units = "px",
      # type = "cairo"
    );


    base::eval(
      base::parse(
        text = command
      )
    );

    dev.off()

    # Proper syntax to close the connection for the log file
    # but could be optional for Snakemake wrapper
    base::sink(type="message");
    base::sink();
