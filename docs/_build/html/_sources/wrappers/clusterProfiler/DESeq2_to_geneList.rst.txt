.. _`DESeq2 to geneList`:

DESEQ2 TO GENELIST
==================

Converts a DESeq2 TSV formatted result into a geneList for clusterProfiler



Software dependencies
---------------------


* r:r-base=3.6.2

* bioconda:bioconductor-org.mm.eg.db=3.10.0

* bioconda:bioconductor-org.hs.eg.db=3.10.0

* bioconda:bioconductor-deseq2=1.26.0

* bioconda:bioconductor-delayedarray=0.12.0

* bioconda:bioconductor-summarizedexperiment=1.16.0




Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_deseq2_to_genelist:
        input:
            rds = "res.tsv"
        output:
            rds = "geneList.RDS"
        message:
            "Testing geneList creation from DESeq2 output"
        threads:
            1
        resources:
            mem_mb = (
                lambda wildcards, attempt: min(attempt * 1024, 10240)
            ),
            time_min = (
                lambda wildcards, attempt: min(attempt * 20, 200)
            )
        log:
            "logs/test_deseq2_to_genelist.log"
        wrapper:
            "0.50.4-46-g68c4a5c/bio/clusterProfiler/DESeq2_to_geneList"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.



Notes
-----

The geneList contains three features:

* numeric vector: fold change or other type of numerical variable
* named vector: every number was named by the corresponding gene ID
* sorted vector: number should be sorted in decreasing order


Parameters:

* alpha_threshold: The padj threshold used to filter non significative events




Authors
-------


* Thibault Dayris



Code
----

.. code-block:: R

    #!/usr/bin/R

    # This script takes a deseq2 tsv result and build
    # a clusterProfiler compatible geneList object

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"


    # Loading DESeq2 for dds object handling
    base::library(package = "DESeq2", quietly = TRUE);
    # Loading databases
    base::library(package = "org.Hs.eg.db", quietly = TRUE);
    base::library(package = "org.Mm.eg.db", quietly = TRUE);

    # Loading input file
    rds <- base::readRDS(
      file=snakemake@input[["rds"]]
    );

    organism <- org.Hs.eg.db;
    if ("organism" %in% base::names(snakemake@params)) {
      if (snakemake@params[["organism"]] == "Mm") {
        organism <- org.Mm.eg.db;
      }
    }

    # Setting alpha and fold change thresholds
    alpha_threshold <- 0.05
    if ("alpha_threshold" %in% base::names(snakemake@params)) {
      alpha_threshold <- base::as.numeric(
          x = snakemake@params[["alpha_threshold"]]
      );
    }
    fc_threshold <- 0.001;
    if ("fc_threshold" %in% names(snakemake@params)) {
      fc_threshold <- base::as.numeric(
        x = snakemake@params[["fc_threshold"]]
      );
    }
    base::message("Dataset and libraries loaded");

    # Gathering results contained within the object
    res_names <- DESeq2::resultsNames(
      object = rds
    );

    # Building geneLists iteratively
    for (resultname in res_names) {
      base::message(base::paste("Building geneList for", resultname))

      res <- DESeq2::results(
        object = rds,
        name = resultname,
        independentFiltering = TRUE,
        alpha = alpha_threshold,
        lfcThreshold = fc_threshold,
        pAdjustMethod = "BH",
        cooksCutoff = TRUE
      );

      res$entrez <- mapIds(
        organism,
        keys=row.names(rds),
        column="ENTREZ",
        keytype="ENSEMBL",
        multiVals="first"
      );

      # Buiding geneList object
      geneList <- res[, "log2FoldChange"];
      base::names(geneList) <- res$entrez;
      geneList <- sort(
        x = geneList,
        decreasing = TRUE,
        na.last = NA
      );

      base::message(
        utils::head(x = geneList)
      );

      base::saveRDS(
        object = geneList,
        file = snakemake@output[["rds"]]
      );
    }
    base::message("Process over");
