.. _`DESeq2 to geneList`:

DESEQ2 TO GENELIST
==================

Converts a DESeq2 TSV formatted result into a geneList for clusterProfiler



Software dependencies
---------------------


* r:r-base=3.6.1

* bioconda:bioconductor-org.mm.eg.db=3.10.0

* bioconda:bioconductor-org.hs.eg.db=3.10.0




Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_deseq2_to_genelist:
        input:
            res = "res.tsv"
        output:
            rds = "geneList.RDS"
        message:
            "Testing geneList creation from DESeq2 output"
        threads:
            1
        resources:
            mem_mb = (
                lambda wildcards, attempt: min(attempt * 1024, 10240)
            ),
            time_min = (
                lambda wildcards, attempt: min(attempt * 20, 200)
            )
        log:
            "logs/test_deseq2_to_genelist.log"
        wrapper:
            "0.50.4-12-ga500302/bio/clusterProfiler/DESeq2_to_geneList"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.



Notes
-----

Parameters:

* alpha_threshold: The padj threshold used to filter non significative events




Authors
-------


* Thibault Dayris



Code
----

.. code-block:: R

    #!/usr/bin/R

    # This script takes a deseq2 tsv result and build
    # a clusterProfiler compatible geneList object

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"


    # Loading databases
    base::library(package = "org.Hs.eg.db", quietly = TRUE);
    base::library(package = "org.Mm.eg.db", quietly = TRUE);

    # Loading input file
    res <- utils::read.table(
      file = snakemake@input[["res"]],
      sep = "\t",
      header = TRUE
    );


    # Setting alpha thresholds
    alpha_threshold <- 0.05
    if ("alpha_threshold" %in% base::names(snakemake@params)) {
      alpha_threshold <- base::as.numeric(
          x = snakemake@params[["alpha_threshold"]]
      )
    }

    # Subsetting initial data
    res <- res[res$padj <= alpha_threshold, ];

    # Buiding geneList object
    geneList <- res[, "log2FoldChange"];
    base::names(geneList) <- base::names(res);
    geneList <- sort(
      x = geneList,
      decreasing = TRUE,
      na.last = NA
    );

    base::message(
      utils::head(x = geneList)
    );

    base::saveRDS(
      object = geneList,
      file = snakemake@output[["rds"]]
    );
