.. _`GSEA plot`:

GSEA PLOT
=========

Perform GSEA-like plot



Software dependencies
---------------------


* bioconda:bioconductor-enrichplot=1.6.0

* bioconda:bioconductor-clusterprofiler=3.14.0

* conda-forge:r-cairo=1.5_12




Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_gseaplot2:
        input:
            rds = "gsea.RDS"
        output:
            png = "gsea.png"
        wrapper:
            "0.60.1-149-gec6acefb/bio/clusterProfiler/gseaplot"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.



Notes
-----

Use clusterProfiler's GSEA wrapper to produce a suitable GSEA object

Parameters:
  * gseDGN_extra: Extra parameters for gseaplot2, besides "x"




Authors
-------


* Thibault Dayris



Code
----

.. code-block:: R

    #!/usr/bin/R

    # This script takes an gsea object from clusterProfiler
    # and builds a GSEA-like plot

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    # Handle enrichment
    base::library(package = "clusterProfiler", quietly = TRUE);
    # Handle graphics
    base::library(package = "Cairo", quietly = TRUE);
    base::library(package = "enrichplot", quietly = TRUE);

    gsea <- base::readRDS(
      file = base::as.character(x = snakemake@input[["rds"]])
    );

    extra <- "x = gsea";
    if ("extra" %in% base::names(snakemake@params)) {
      extra <- base::paste(
        extra,
        snakemake@params[["extra"]],
        sep = ", "
      );
    } else {
      extra <- base::paste(
        extra,
        "geneSetID = 1",
        sep = ", "
      )
    }
    base::message("Libraries and input data loaded");

    command <- base::paste0(
      "enrichplot::gseaplot2(",
      extra,
      ")"
    );
    base::message(command);

    # Build plot
    png(
      filename = snakemake@output[["png"]],
      width = 1024,
      height = 768,
      units = "px",
      type = "cairo"
    );

    base::eval(
      base::parse(
        text = command
      )
    );

    dev.off()
