.. _`bio/clusterProfiler/treeplot`:

TREEPLOT
========

Group terms paiwise and plot clusters

**URL**: https://yulab-smu.top/biomedical-knowledge-mining-book/enrichplot.html

Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_treeplot:
        input:
            rds = "gene_list.RDS",
        output:
            png = "treeplot.png",
        params:
            extra_paiwise_termism = "",
            extra_treeplot = "",
        log:
            "logs/treeplot.log"
        wrapper:
            "0.79.0-1274-g1c3f62c3a/bio/clusterProfiler/treeplot"

Note that input, output and log file paths can be chosen freely.

When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bioconda:bioconductor-enrichplot=1.4.0``
* ``bioconda:bioconductor-clusterprofiler=3.12.0``

Input/Output
------------
**Input:**

* ``edo``: Enrich analysis from clusterProfiler

**Output:**

* ``png``: Path to the treeplot
* ``pairs``: Path to pairwise_termsim result (RDS formatted)



Params
------

* ``extra_paiwise_termism``: Extra parameters for pairwise_termsim function

* ``extra_treeplot``: Extra parameters for treeplot function





Authors
-------

* Thibault Dayris


Code
----

.. code-block:: R

    #!/usr/bin/R

    # This script takes an enriched terms object from clusterProfiler
    # and builds a tree of most enriched terms or provided list of
    # pathways

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    # Sink the stderr and stdout to the snakemake log file
    # https://stackoverflow.com/a/48173272
    log.file<-file(snakemake@log[[1]],open="wt");
    base::sink(log.file);
    base::sink(log.file,type="message");

    # Handle enrichment
    base::library(package = "clusterProfiler", quietly = TRUE);
    # Handle graphics
    # base::library(package = "Cairo", quietly = TRUE);
    base::library(package = "enrichplot", quietly = TRUE);

    enriched <- base::readRDS(
      file = base::as.character(x = snakemake@input[["rds"]])
    );

    fc <- NULL;
    if ("gene_list" %in% base::names(snakemake@input)) {
      fc <- readRDS(
        file = base::as.character(snakemake@input[["gene_list"]])
      );
    }

    extra_paiwise_termism <- "x = enriched";
    if ("extra_paiwise_termism" %in% base::names(snakemake@params)) {
      extra_paiwise_termism <- base::paste(
        extra_paiwise_termism,
        snakemake@params[["extra_paiwise_termism"]],
        sep = ", "
      );
    }

    extra_treeplot <- "x = enriched";
    if ("extra_treeplot" %in% base::names(snakemake@params)) {
      extra_treeplot <- base::paste(
        extra_treeplot,
        snakemake@params[["extra_treeplot"]],
        sep = ", "
      );
    }
    base::message("Libraries and input data loaded");

    # Build paiwise_termism command line
    command <- base::paste0(
      "enrichplot::pairwise_termsim(",
      extra_paiwise_termism,
      ")"
    );
    base::message(command);

    # Execute pairwise_termsim clustering
    pairs <- base::eval(base::parse(text = command));

    # Build treeplot command line
    command <- base::paste0(
      "enrichplot::treeplot(",
      extra_treeplot,
      ")"
    );
    base::message(command);

    # Build plot
    png(
      filename = snakemake@output[["png"]],
      width = 1024,
      height = 768,
      units = "px",
      # type = "cairo"
    );


    base::eval(
      base::parse(
        text = command
      )
    );

    dev.off()

    # Proper syntax to close the connection for the log file
    # but could be optional for Snakemake wrapper
    base::sink(type="message");
    base::sink();


.. |nl| raw:: html

   <br>