.. _`Group GO`:

GROUP GO
========

GO classification



Software dependencies
---------------------


* bioconda:bioconductor-clusterprofiler=3.14.0

* bioconda:bioconductor-org.hs.eg.db=3.10.0

* bioconda:bioconductor-org.mm.eg.db=3.10.0

* bioconda:bioconductor-dose=3.12.0




Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_groupGO:
        input:
            rds = "geneList.RDS"
        output:
            rds = "groupGO.RDS",
            tsv = "groupGO.tsv"
        message:
            "Testing enrichDO"
        log:
            "logs/test_groupGO.log"
        wrapper:
            "0.50.4-46-g68c4a5c/bio/clusterProfiler/groupGO"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.



Notes
-----

The geneList object if described in the
DESeq2_to_geneList wrapper

Parameters:
  * groupGO_extra: Extra parameters for gseDO, besides "gene", "OrgDb", and "readable"
  * organism: Either Hs or Mm




Authors
-------


* Thibault Dayris



Code
----

.. code-block:: R

    #!/usr/bin/R

    # This script takes a geneList object and performs
    # an enrichment analysis based on DOSE database

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    # Perform gene enrichment
    base::library(package = "clusterProfiler", quietly = TRUE);
    # Loading databases
    base::library(package = "org.Hs.eg.db", quietly = TRUE);
    base::library(package = "org.Mm.eg.db", quietly = TRUE);


    # Loading input dataset
    geneList <- base::readRDS(
      file = snakemake@input[["rds"]]
    );

    organism <- org.Hs.eg.db;
    if ("organism" %in% base::names(snakemake@params)) {
      if (snakemake@params[["organism"]] == "Mm") {
        organism <- org.Mm.eg.db;
      }
    }

    extra <- "gene = names(geneList), OrgDb = organism, readable = TRUE";
    if ("groupGO_extra" %in% base::names(snakemake@params)) {
      extra <- base::paste(
        extra,
        snakemake@params[["groupGO_extra"]],
        sep = ", "
      )
    }

    command <- base::paste0(
      "clusterProfiler::groupGO(",
      extra,
      ")"
    );
    base::message("Libraries and datasets loaded");
    base::message(command);

    # Performing DOSE enrichment
    gse_do <- base::eval(
      base::parse(
        text = command
      )
    );

    # Saving results
    base::saveRDS(
      obj = gse_do,
      file = snakemake@output[["rds"]]
    );

    utils::write.table(
      x = gse_do,
      file = snakemake@output[["tsv"]]
    );
