.. _`fastqc`:

FASTQC
======

Generate fastq qc statistics using fastqc.




Software dependencies
---------------------


* fastqc ==0.11.8




Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule fastqc:
        input:
            "reads/{sample}.fastq"
        output:
            html="qc/fastqc/{sample}.html",
            zip="qc/fastqc/{sample}_fastqc.zip" # the suffix _fastqc.zip is necessary for multiqc to find the file. If not using multiqc, you are free to choose an arbitrary filename
        params: ""
        log:
            "logs/fastqc/{sample}.log"
        wrapper:
            "0.50.4-12-ga500302/bio/fastqc"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.




Authors
-------


* Julian de Ruiter



Code
----

.. code-block:: python

    """Snakemake wrapper for fastqc."""

    __author__ = "Julian de Ruiter"
    __copyright__ = "Copyright 2017, Julian de Ruiter"
    __email__ = "julianderuiter@gmail.com"
    __license__ = "MIT"


    from os import path
    from tempfile import TemporaryDirectory

    from snakemake.shell import shell

    log = snakemake.log_fmt_shell(stdout=False, stderr=True)


    def basename_without_ext(file_path):
        """Returns basename of file path, without the file extension."""

        base = path.basename(file_path)

        split_ind = 2 if base.endswith(".fastq.gz") else 1
        base = ".".join(base.split(".")[:-split_ind])

        return base


    # Run fastqc, since there can be race conditions if multiple jobs
    # use the same fastqc dir, we create a temp dir.
    with TemporaryDirectory() as tempdir:
        shell(
            "fastqc {snakemake.params} --quiet "
            "--outdir {tempdir} {snakemake.input[0]}"
            " {log}"
        )

        # Move outputs into proper position.
        output_base = basename_without_ext(snakemake.input[0])
        html_path = path.join(tempdir, output_base + "_fastqc.html")
        zip_path = path.join(tempdir, output_base + "_fastqc.zip")

        if snakemake.output.html != html_path:
            shell("mv {html_path} {snakemake.output.html}")

        if snakemake.output.zip != zip_path:
            shell("mv {zip_path} {snakemake.output.zip}")
