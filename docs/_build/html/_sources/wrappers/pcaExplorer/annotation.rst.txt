.. _`pcaExplorer Annotation`:

PCAEXPLORER ANNOTATION
======================

Prepare annotation object for pcaExplorer



Software dependencies
---------------------


* bioconda:bioconductor-delayedarray=0.12.0

* bioconda:bioconductor-deseq2=1.26.0

* conda-forge:r-readr=1.3.1

* bioconda:bioconductor-summarizedexperiment=1.16.0

* bioconda:bioconductor-iranges=2.20.0




Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_pcaexplorer_annotation:
        input:
            dds = "dds.RDS",
            tr2gene = "tr2gene.tsv"
        output:
            annotation  = "annot.RDS"
        message:
            "Testing annotation wrapper"
        threads:
            1
        resources:
            mem_mb = (
                lambda wildcards, attempt: min(attempt * 1024, 10240)
            ),
            time_min = (
                lambda wildcards, attempt: min(attempt * 20, 200)
            )
        log:
            "logs/test_pcaexplorer_annotation.log"
        wrapper:
            "0.66.0-243-ged9d28af/bio/pcaExplorer/annotation"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.



Notes
-----

This is only used by pcaExplorer and has no other purpose




Authors
-------


* Thibault Dayris



Code
----

.. code-block:: R

    #!/usr/bin/R

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    # This script takes a tsv formatted text file
    # composed of the following columns:
    # gene_id, transcript_id, gene_name
    # And builds an object designed for pcaExplorer

    # Load libraries
    base::library(package = "DelayedArray");
    base::library(package = "IRanges");
    base::library(package = "readr");

    # Load datasets
    dds_path <- base::as.character(
      x = snakemake@input[["dds"]]
    );
    dds <- base::readRDS(file = dds_path);

    tx2gene_path <- base::as.character(
      x = snakemake@input[["tr2gene"]]
    );
    tx2gene <- utils::read.table(
      file = tx2gene_path,
      sep = "\t",
      header = FALSE,
      stringsAsFactors = FALSE
    );

    # Remove un-used transcript_id
    tx2gene <- tx2gene[, c("V1", "V3")];
    IRanges::colnames(tx2gene) <- c("gene_id", "gene_name");
    tx2gene <- DelayedArray::unique(tx2gene);
    base::row.names(tx2gene) <- tx2gene$gene_id;

    # Build final dataframe
    gene_names <- tx2gene[base::row.names(x = dds), ];
    gene_names$gene_id <- NULL;
    annotation <- base::data.frame(
      gene_name = gene_names,
      row.name = IRanges::rownames(x = dds),
      stringsAsFactors = FALSE
    );

    annot_output <- base::as.character(
      x = snakemake@output[["annotation"]]
    );
    base::saveRDS(
      object = annotation,
      file = annot_output
    );
