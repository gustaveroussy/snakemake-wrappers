.. _`pcaExplorer PCA Scree`:

PCAEXPLORER PCA SCREE
=====================

Plot PCA loadings from a vst/rld transformed dds object



Software dependencies
---------------------


* bioconda:bioconductor-deseq2=1.26.0

* bioconda:bioconductor-pcaexplorer=2.12.0

* bioconda:bioconductor-delayedarray=0.12.0

* conda-forge:r-readr=1.3.1

* conda-forge:r-jsonlite=1.6.1

* bioconda:bioconductor-summarizedexperiment=1.16.0

* bioconda:bioconductor-iranges=2.20.0

* conda-forge:cairo=1.16.0

* conda-forge:r-cairo=1.5_11




Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_pcaexplorer_pcascree:
        input:
            dst = "vst.RDS"
        output:
            png = "plot.png"
        message:
            "Testing pcaExplorer PCA-Scree"
        threads:
            1
        resources:
            mem_mb = (
                lambda wildcards, attempt: min(attempt * 1024, 10240)
            ),
            time_min = (
                lambda wildcards, attempt: min(attempt * 20, 200)
            )
        params:
            extra = "type = c('pev')"
        log:
            "logs/test_pcaexplorer_pcascree.log"
        wrapper:
            "0.60.1-148-g809106c5/bio/pcaExplorer/PCAScree"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.



Notes
-----

Parameters:

* extra (str) Command line arguments (interpreted by R)




Authors
-------


* Thibault Dayris



Code
----

.. code-block:: R

    #!/usr/bin/R

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    # This script takes a deseq2 transform object and performs
    # a plot over pca loadings


    base::library(package = "DESeq2");        # Differential analysis
    base::library(package = "pcaExplorer");   # Handles PCAs
    base::library(package = "Cairo");         # Graphic library

    # Overload output defaults in order to avoid
    # X11 foreward errors on cluster nodes
    options(bitmapType="cairo");

    # Load specified input files
    dst_path <- base::as.character(
      x = snakemake@input[["dst"]]
    );
    dst <- base::readRDS(file = dst_path);
    pca <- stats::prcomp(t(SummarizedExperiment::assay(dst)))


    # Load extra parameters
    extra <- "pca"
    if ("extra" %in% names(snakemake@params)) {
      extra <- base::paste(
          extra,
          snakemake@params[["extra"]],
          sep = ", "
      );
    }


    command <- base::paste0(
      "pcaExplorer::pcascree(",
      extra,
      ");"
    );

    base::message(command);

    # Build plot
    png(
      filename = snakemake@output[["png"]],
      width = 1024,
      height = 768,
      units = "px",
      type = "cairo"
    );

    base::eval(
      base::parse(
        text = command
      )
    );

    dev.off()
