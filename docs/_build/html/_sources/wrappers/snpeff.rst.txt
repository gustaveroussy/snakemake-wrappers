.. _`snpeff`:

SNPEFF
======

Annotate predicted effect of nucleotide changes with SnpEff



Software dependencies
---------------------


* snpeff ==4.3.1t

* bcftools =1.10




Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule snpeff:
        input:
            "{sample}.vcf", # (vcf, bcf, or vcf.gz)
        output:
            calls="snpeff/{sample}.vcf",   # annotated calls (vcf, bcf, or vcf.gz)
            stats="snpeff/{sample}.html",  # summary statistics (in HTML), optional
            csvstats="snpeff/{sample}.csv" # summary statistics in CSV, optional
        log:
            "logs/snpeff/{sample}.log"
        params:
            reference="ebola_zaire", # reference name (from `snpeff databases`)
            extra="-Xmx4g"           # optional parameters (e.g., max memory 4g)
        wrapper:
            "0.50.4-3-ga47e758/bio/snpeff"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.




Authors
-------


* Bradford Powell



Code
----

.. code-block:: python

    __author__ = "Bradford Powell"
    __copyright__ = "Copyright 2018, Bradford Powell"
    __email__ = "bpow@unc.edu"
    __license__ = "BSD"


    from snakemake.shell import shell
    from os import path
    import shutil
    import tempfile

    shell.executable("bash")

    outcalls = snakemake.output.calls
    if outcalls.endswith(".vcf.gz"):
        outprefix = "| bcftools view -Oz"
    elif outcalls.endswith(".bcf"):
        outprefix = "| bcftools view -Ob"
    else:
        outprefix = ""

    incalls = snakemake.input[0]
    if incalls.endswith(".bcf"):
        incalls = "< <(bcftools view {})".format(incalls)

    log = snakemake.log_fmt_shell(stdout=False, stderr=True)

    extra = snakemake.params.get("extra", "")

    data_dir = snakemake.params.get("data_dir", "")
    if data_dir:
        data_dir = '-dataDir "%s"' % data_dir

    stats = snakemake.output.get("stats", "")
    csvstats = snakemake.output.get("csvstats", "")
    csvstats_opt = "" if not csvstats else "-csvStats {}".format(csvstats)
    stats_opt = "-noStats" if not stats else "-stats {}".format(stats)

    shell(
        "snpEff {data_dir} {stats_opt} {csvstats_opt} {extra} "
        "{snakemake.params.reference} {incalls} "
        "{outprefix} > {outcalls} {log}"
    )
