.. _`bio/isoformSwitchAnalyseR/analyzePFAM`:

ANALYZEPFAM
===========

Add PFAM analysis to switch list


Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_analyze_cpat:
        input:
            switch_list = "switch_list.RDS",
            pfam = "pfam_results.txt"
        output:
            rds = "switch_list_with_pfam.RDS"
        wrapper:
            "0.72.0-532-g204bc6cbf/bio/isoformSwitchAnalyzeR/analyzePFAM"

Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bioconda:bioconductor-isoformswitchanalyzer=1.8.0``

Input/Output
------------
**Input:**

* Swtich list
* PFAM results

**Output:**

* Switch list with PFAM results included



Notes
-----

Parameters:
  * extra: Optional parameters passed to importIsoformExpression, besides "switchAnalyzeRlist" and "pathToPFAMresultFile"



Authors
-------

* Thibault Dayris


Code
----

.. code-block:: R

    #!/usr/bin/R

    # This script takes a IsoformSwitchAnalyseR object
    # and add CPAT results

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"


    # The main package
    base::library(package = "IsoformSwitchAnalyzeR", quietly = TRUE);

    # Gathering input dataset and parameters
    switch_list <- base::readRDS(
      file = base::as.character(x = snakemake@input[["switch_list"]])
    );

    extra <- base::paste0(
      "switchAnalyzeRlist = switch_list, pathToPFAMresultFile = '",
      snakemake@input[["pfam"]],
      "'"
    );
    if ("extra" %in% base::names(snakemake@params)) {
      extra <- base::paste(
        extra,
        snakemake@params[["extra"]],
        sep = ", "
      );
    }

    # Buiding command line itself
    command <- base::paste0(
      "IsoformSwitchAnalyzeR::analyzePFAM(",
      extra,
      ")"
    );
    base::message("Libraries and input data loaded");
    base::message(command);

    # Running command
    pfam_scanned <- base::eval(
      base::parse(
        text = command
      )
    );

    # Saving results
    base::saveRDS(
      obj = pfam_scanned,
      file = snakemake@output[["rds"]]
    );
