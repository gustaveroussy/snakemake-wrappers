.. _`importIsoformExpression`:

IMPORTISOFORMEXPRESSION
=======================

Import Salmon/Kallisto/RSEM/... in InsoformSwitchAnalyseR



Software dependencies
---------------------


* bioconda:bioconductor-isoformswitchanalyzer=1.8.0




Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_isoformSwitchAnalyseR_importIsoformExpression:
        input:
            quant = expand("quant/A/quant.sf")
        output:
            txi = "importIsoformExpression.RDS"
        params:
            extra = "addIsofomIdAsColumn = TRUE"
        wrapper:
            "0.60.1-166-g8fbba268/bio/isoformSwitchAnalyseR/importIsoformExpression"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.



Notes
-----

Parameters:
  * extra: Optional parameters passed to importIsoformExpression, besides "parentDir"




Authors
-------


* Thibault Dayris



Code
----

.. code-block:: R

    #!/usr/bin/R

    # This script takes an list of Salmon directories
    # and builds a IsoformSwitchAnalyseR object

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"


    # The main package
    base::library(package = "isoformSwitchAnalyzeR", quietly = TRUE);

    # Gathering parameters
    quant_files <- sapply(
      snakemake@input[["quant"]],
      function(quant) base::as.character(x = quant)
    );


    extra <- "parentDir = quant_files";
    if ("extra" %in% base::names(snakemake@params)) {
      extra <- base::paste(
        extra,
        snakemake@params[["extra"]],
        sep = ", "
      );
    }

    # Buiding command line itself
    command <- base::paste0(
      "InsoformSwitchAnalyseR::importIsoformExpression(",
      extra,
      ")"
    );
    base::message("Libraries and input data loaded");
    base::message(command);

    # Running command
    base::eval(
      base::parse(
        text = command
      )
    );

    # Saving results
    base::saveRDS(
      obj = edgn,
      file = snakemake@output[["rds"]]
    );
