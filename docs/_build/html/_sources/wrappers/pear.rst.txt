.. _`pear`:

PEAR
====

PEAR is an ultrafast, memory-efficient and highly accurate pair-end read merger





Example
-------

This meta-wrapper can be used in the following way:

.. code-block:: python

    rule pear_merge:
        input:
            read1="reads/reads.left.fq.gz",
            read2="reads/reads.right.fq.gz"
        output:
            assembled="pear/reads_pear_assembled.fq.gz",
            discarded="pear/reads_pear_discarded.fq.gz",
            unassembled_read1="pear/reads_pear_unassembled_r1.fq.gz",
            unassembled_read2="pear/reads_pear_unassembled_r2.fq.gz",
        log:
            'logs/pear.log'
        params:
            pval=".01",
            extra=""
        threads: 4
        resources:
            mem_mb=4000 # define amount of memory to be used by pear
        wrapper:
            "0.65.0-211-g6a5c5194/bio/pear"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.




Authors
-------


* N. Tessa Pierce



Code
----


