.. _`gatk3 RealignerTargetCreator`:

GATK3 REALIGNERTARGETCREATOR
============================

Run gatk3 RealignerTargetCreator



Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule realignertargetcreator:
        input:
            bam="mapped/{sample}.bam"
            ref="genome.fasta",
            known="dbsnp.vcf.gz"
        output:
            "{sample}.intervals"
        log:
            "logs/gatk/realignertargetcreator/{sample}.log"
        params:
            extra=""  # optional
        resources:
            mem_mb = 1024
        threads: 16
        wrapper:
            "bio/gatk3/realignertargetcreator"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``gatk==3.8``
* ``snakemake-wrapper-utils==0.1.3``

Input/Output
------------
**Input:**

* bam file
* vcf files
* reference genome

**Output:**

* target intervals



Notes
-----

* The `java_opts` param allows for additional arguments to be passed to the java compiler, e.g. "-Xmx4G" for one, and "-Xmx4G -XX:ParallelGCThreads=10" for two options.
* The `extra` param alllows for additional program arguments.
* For more inforamtion see, https://software.broadinstitute.org/gatk/documentation/article?id=11050
* Gatk3.jar is not included in the bioconda package, i.e it need to be added to the conda environment manually.



Authors
-------

* Patrik Smeds


Code
----

.. code-block:: python

    __author__ = "Patrik Smeds"
    __copyright__ = "Copyright 2019, Patrik Smeds"
    __email__ = "patrik.smeds@gmail.com.com"
    __license__ = "MIT"

    import os

    from snakemake.shell import shell
    from snakemake_wrapper_utils.java import get_java_opts

    extra = snakemake.params.get("extra", "")
    java_opts = get_java_opts(snakemake)

    input_bam = snakemake.input.bam
    input_known = snakemake.input.known
    input_ref = snakemake.input.ref
    bed = snakemake.params.get("bed", None)
    if bed is not None:
        bed = "-L " + bed
    else:
        bed = ""

    input_known_string = ""
    for known in input_known:
        input_known_string = input_known_string + " --known {}".format(known)

    log = snakemake.log_fmt_shell(stdout=True, stderr=True)


    shell(
        "gatk3 {java_opts} -T RealignerTargetCreator"
        " -nt {snakemake.threads}"
        " {extra}"
        " -I {input_bam}"
        " -R {input_ref}"
        " {input_known_string}"
        " {bed}"
        " -o {snakemake.output}"
        " {log}"
    )
