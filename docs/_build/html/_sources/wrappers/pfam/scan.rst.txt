.. _`pfam_scan`:

PFAM_SCAN
=========

Search in a Fasta file against pfam HMM database



Software dependencies
---------------------


* bioconda:pfam_scan=1.6




Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_pfam_scan:
        input:
            fasta =
            pfam_dir =
        output:
            "pfam_scanned"
        wrapper:
            "0.66.0-241-gab2c8ef4/bio/pfam/scan"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.




Authors
-------


* Thibault Dayris



Code
----

.. code-block:: python

    #!/usr/bin/python3
    # -*- coding: utf-8 -*-

    """This is the Snakemake Wrapper for Pfam scan"""

    __author__ = "Thibault Dayris"
    __copyright__ = "Copyright 2020, Thibault Dayris"
    __email__ = "thibault.dayris@gustaveroussy.fr"
    __license__ = "MIT"


    from snakemake.shell import shell
    log = snakemake.log_fmt_shell(stdout=True, stderr=True)

    extra = snakemake.params.get("extra", "")

    shell(
        " pfam_scan.pl "
        " -fasta {snakemake.input['fasta']} "
        " -dir {snakemake.input['pfam_dir']} "
        " --outfile {snakemake.output[0]} "
        " -cpu {snakemake.threads} "
        " {extra} "
        " {log} "
    )
