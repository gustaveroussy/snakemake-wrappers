.. _`DESeq2_clustermap_genes`:

DESEQ2_CLUSTERMAP_GENES
=======================

Build a differentially-expressed-gene-based clustered heatmap



Software dependencies
---------------------


* conda-forge:r-pheatmap=1.0.12

* bioconda:bioconductor-deseq2=1.28.0




Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_pheatmap_deseq2:
        input:
            dds = "wald.RDS",
            norm = "vst.RDS"
        output:
            png = "plot.png"
        params:
            condition_array = ["Cond"],
            padj_threshold = 1,
            extra = "cluster_rows=TRUE, show_rownames=FALSE, cluster_cols=FALSE"
        wrapper:
            "0.60.1-163-g34160919/bio/pheatmap/deseq2"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.



Notes
-----

Parameters:

* padj_threshold (float): The adjusted pvalue threshold
* fc_threshold (float): The fold change threshold




Authors
-------


* Thibault Dayris



Code
----

.. code-block:: R

    #!/usr/bin/R

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    library(package = "pheatmap", quietly = TRUE);
    library(package = "DESeq2", quietly = TRUE);

    # Loading datasets and parameters
    dds <- base::readRDS(
      file = base::as.character(x = snakemake@input[["dds"]])
    );

    norm <- base::readRDS(
      file = base::as.character(x = snakemake@input[["norm"]])
    );

    condition_array <- sapply(
      snakemake@params[["condition_array"]],
      function(cond) base::as.character(x = cond)
    );

    padj_threshold <- 0.05;
    if ("padj_threshold" %in% names(snakemake@params)) {
      padj_threshold <- snakemake@params[["padj_threshold"]];
    }

    # Filter results
    select_padj <- results(dds)$padj <= padj_threshold;
    print(head(dds$padj))
    annotation <- base::as.data.frame(
      x = colData(dds)[, condition_array]
    );

    normalized_counts <- assay(norm)[select_padj,];
    print("normalized_counts:")
    print(head(normalized_counts))

    # Buildcommand line
    extra <- 'normalized_counts, annotation_col = annotation';
    if ("extra" %in% names(snakemake@params)) {
      extra <- base::paste(
        extra,
        snakemake@params[["extra"]],
        sep=", "
      );
    }

    command <- paste0(
      "pheatmap::pheatmap(",
      extra,
      ")"
    );
    print(command);

    # Build plot and save it
    png(
      filename = snakemake@output[["png"]],
      width = 1024,
      height = 768,
      units = "px",
      type = "cairo"
    );

    base::eval(
      base::parse(
        text = command
      )
    );

    dev.off();
