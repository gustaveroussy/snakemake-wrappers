.. _`gatk VariantRecalibrator`:

GATK VARIANTRECALIBRATOR
========================

Run gatk VariantRecalibrator.




Software dependencies
---------------------


* gatk4 ==4.1.4.1




Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    from snakemake.remote import GS

    # GATK resource bundle files can be either directly obtained from google storage (like here), or
    # from FTP. You can also use local files.
    GS = GS.RemoteProvider()


    def gatk_bundle(f):
        return GS.remote("genomics-public-data/resources/broad/hg38/v0/{}".format(f))


    rule haplotype_caller:
        input:
            vcf="calls/all.vcf",
            ref="genome.fasta",
            # resources have to be given as named input files
            hapmap=gatk_bundle("hapmap_3.3.hg38.sites.vcf.gz"),
            omni=gatk_bundle("1000G_omni2.5.hg38.sites.vcf.gz"),
            g1k=gatk_bundle("1000G_phase1.snps.high_confidence.hg38.vcf.gz"),
            dbsnp=gatk_bundle("Homo_sapiens_assembly38.dbsnp138.vcf.gz"),
            # use aux to e.g. download other necessary file
            aux=[gatk_bundle("hapmap_3.3.hg38.sites.vcf.gz.tbi"), 
                 gatk_bundle("1000G_omni2.5.hg38.sites.vcf.gz.tbi"),
                 gatk_bundle("1000G_phase1.snps.high_confidence.hg38.vcf.gz.tbi"),
                 gatk_bundle("Homo_sapiens_assembly38.dbsnp138.vcf.gz.tbi")]
        output:
            vcf="calls/all.recal.vcf",
            tranches="calls/all.tranches"
        log:
            "logs/gatk/variantrecalibrator.log"
        params:
            mode="SNP",  # set mode, must be either SNP, INDEL or BOTH
            # resource parameter definition. Key must match named input files from above.
            resources={"hapmap": {"known": False, "training": True, "truth": True, "prior": 15.0},
                       "omni":   {"known": False, "training": True, "truth": False, "prior": 12.0},
                       "g1k":   {"known": False, "training": True, "truth": False, "prior": 10.0},
                       "dbsnp":  {"known": True, "training": False, "truth": False, "prior": 2.0}},
            annotation=["QD", "FisherStrand"],  # which fields to use with -an (see VariantRecalibrator docs)
            extra="",  # optional
            java_opts="", # optional
        wrapper:
            "0.60.1-146-g7a5461a4/bio/gatk/haplotypecaller"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.



Notes
-----

* The `java_opts` param allows for additional arguments to be passed to the java compiler, e.g. "-Xmx4G" for one, and "-Xmx4G -XX:ParallelGCThreads=10" for two options.
* The `extra` param alllows for additional program arguments.
* For more inforamtion see, https://software.broadinstitute.org/gatk/documentation/article?id=11050




Authors
-------


* Johannes Köster

* Jake VanCampen



Code
----

.. code-block:: python

    __author__ = "Johannes Köster"
    __copyright__ = "Copyright 2018, Johannes Köster"
    __email__ = "johannes.koester@protonmail.com"
    __license__ = "MIT"


    import os

    from snakemake.shell import shell


    extra = snakemake.params.get("extra", "")
    java_opts = snakemake.params.get("java_opts", "")


    def fmt_res(resname, resparams):
        fmt_bool = lambda b: str(b).lower()
        try:
            f = snakemake.input.get(resname)
        except KeyError:
            raise RuntimeError(
                "There must be a named input file for every resource (missing: {})".format(
                    resname
                )
            )
        return "{},known={},training={},truth={},prior={}:{}".format(
            resname,
            fmt_bool(resparams["known"]),
            fmt_bool(resparams["training"]),
            fmt_bool(resparams["truth"]),
            resparams["prior"],
            f,
        )


    resources = [
        "--resource {}".format(fmt_res(resname, resparams))
        for resname, resparams in snakemake.params["resources"].items()
    ]
    annotation = list(map("-an {}".format, snakemake.params.annotation))
    tranches = ""
    if snakemake.output.tranches:
        tranches = "--tranches-file " + snakemake.output.tranches

    log = snakemake.log_fmt_shell(stdout=True, stderr=True)
    shell(
        "gatk --java-options '{java_opts}' VariantRecalibrator {extra} {resources} "
        "-R {snakemake.input.ref} -V {snakemake.input.vcf} "
        "-mode {snakemake.params.mode} "
        "--output {snakemake.output.vcf} "
        "{tranches} {annotation} {log}"
    )
