.. _`VST`:

VST
===

Apply a variance stabilizing transformation



Software dependencies
---------------------


* bioconductor-deseq2==1.26.0




Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_vst:
        input:
            dds = "dds.RDS"
        output:
            rds = "vst.RDS",
            tsv = "vst.tsv"
        message:
            "Testing DESeq2 VST"
        threads:
            1
        resources:
            mem_mb = (
                lambda wildcards, attempt: min(attempt * 1024, 2048)
            ),
            time_min = (
                lambda wildcards, attempt: min(attempt * 10, 20)
            )
        log:
            "logs/test_vst.log"
        wrapper:
            "0.64.0-178-g55324f95/bio/deseq2/vst"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.




Authors
-------


* Thibault Dayris



Code
----

.. code-block:: R

    #!/usr/bin/R

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    # This script takes a deseq2 dataset object and performs
    # a variance stabilizing transformations transformation on it

    # Differential Gene expression
    base::library(package = "DESeq2", quietly = TRUE);
    # Handle large datasets
    base::library(package = "SummarizedExperiment", quietly = TRUE);

    # Cast input path as character
    dds_path <- base::as.character(x = snakemake@input[["dds"]]);
    dds <- base::readRDS(file = dds_path);

    # Recover extra parameters
    extra <- "";
    if ("extra" %in% names(snakemake@params)) {
      extra <- base::paste0(
        ", ",
        base::as.character(x = snakemake@params[["extra"]])
      );
    }

    # Create object
    vst <- base::eval(
      base::parse(
        text = base::paste0(
          "DESeq2::vst(object = dds ", extra, ");"
        )
      )
    );

    # Save results
    output_rds <- base::as.character(snakemake@output[["rds"]]);
    base::saveRDS(
      obj = vst,
      file = output_rds
    );


    output_table <- base::as.character(snakemake@output[["tsv"]]);
    tsv <- SummarizedExperiment::assay(vst);
    utils::write.table(
      x = tsv,
      file = output_table,
      sep = "\t",
      quote = FALSE
    );
