.. _`DESeq`:

DESEQ
=====

Perform DESeq2 default analysis through size factor and dispersion estimates,
and negative binomial GLM fitting and Wald test.




Software dependencies
---------------------


* bioconda:bioconductor-deseq2=1.26.0

* bioconda:bioconductor-delayedarray=0.12.0

* conda-forge:r-readr=1.3.1

* conda-forge:r-jsonlite=1.6.1

* bioconda:bioconductor-summarizedexperiment=1.16.0




Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_deseq:
        input:
            dds = "dds.RDS"
        output:
            rds = "wald.RDS",
            tsv = directory("tsv")
        message:
            "Testing DESeq2 nbinomWaldTest"
        threads:
            1
        resources:
            mem_mb = (
                lambda wildcards, attempt: min(attempt * 1024, 2048)
            ),
            time_min = (
                lambda wildcards, attempt: min(attempt * 10, 20)
            )
        log:
            "logs/test_nbinomWaldTest.log"
        wrapper:
            "0.66.0-241-gab2c8ef4/bio/deseq2/DESeq"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.



Notes
-----

Parameters:

* alpha_threshold: The padj threshold used to filter the result table
* fc_threshold: The fold change threshold used to filter the result table




Authors
-------


* Thibault Dayris



Code
----

.. code-block:: R

    #!/usr/bin/R

    # This script takes a deseq2 dataset object and performs
    # a default DESeq2 analysis

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    # Differential Gene expression
    base::library(package = "DESeq2", quietly = TRUE);

    # Load DESeq2 dataset
    dds_path <- base::as.character(
      x = snakemake@input[["dds"]]
    );
    dds <- base::readRDS(file = dds_path);

    # Build extra parameters for DESeq2 nbinomWaldTest
    extra <- "";
    if ("extra" %in% snakemake@params) {
      extra <- base::paste0(
        ", ",
        base::as.character(x = snakemake@params[["extra"]])
      );
    }
    base::message("Libraries and dataset loaded");

    # Create object
    wald <- base::eval(
      base::parse(
        text = base::paste0(
          "DESeq2::DESeq(object = dds", extra, ");"
        )
      )
    );

    # Save results
    output_rds <- base::as.character(
      x = snakemake@output[["rds"]]
    );

    base::saveRDS(
      obj = wald,
      file = output_rds
    );
    base::message("Wald test over, RDS saved");


    names <- DESeq2::resultsNames(
      object = wald
    );

    output_prefix <- snakemake@output[["tsv"]];
    if (! base::file.exists(output_prefix)) {
      base::dir.create(
        path = output_prefix,
        recursive = TRUE
      );
    }

    alpha_threshold <- 0.5;
    if ("alpha_threshold" %in% names(snakemake@params)) {
      alpha_threshold <- base::as.numeric(
        x = snakemake@params[["alpha_threshold"]]
      );
    }

    fc_threshold <- 0.001;
    if ("fc_threshold" %in% names(snakemake@params)) {
      fc_threshold <- base::as.numeric(
        x = snakemake@params[["fc_threshold"]]
      );
    }

    for (resultname in names) {
      base::message(base::paste("Saving results for", resultname))
      results_frame <- DESeq2::results(
        object = wald,
        name = resultname,
        independentFiltering = TRUE,
        alpha = alpha_threshold,
        lfcThreshold = fc_threshold,
        pAdjustMethod = "BH",
        cooksCutoff = TRUE
      );

      results_path <- base::file.path(
        output_prefix,
        base::paste0("Deseq2_", resultname, ".tsv")
      );

      utils::write.table(
        x = results_frame,
        file = results_path,
        quote = FALSE,
        sep = "\t",
        row.names = TRUE
      );
    }
