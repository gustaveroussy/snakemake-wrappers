.. _`plot MA`:

PLOT MA
=======

Perform a MA plot over DESeq2 results



Software dependencies
---------------------


* bioconda:bioconductor-deseq2=1.26.0

* bioconda:bioconductor-delayedarray=0.12.0

* conda-forge:r-readr=1.3.1

* conda-forge:r-jsonlite=1.6.1

* bioconda:bioconductor-summarizedexperiment=1.16.0

* bioconda:bioconductor-iranges=2.20.0

* conda-forge:cairo=1.16.0

* conda-forge:r-cairo=1.5_11




Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_deseq2_plotma:
        input:
            res = "res.tsv"
        output:
            png = "MAplot.png"
        message:
            "Testing MAplot with DESeq2"
        threads:
            1
        resources:
            mem_mb = (
                lambda wildcards, attempt: min(attempt * 1024, 2048)
            ),
            time_min = (
                lambda wildcards, attempt: min(attempt * 10, 20)
            )
        log:
            "logs/test_deseq2_plotma.log"
        wrapper:
            "0.60.1-163-g34160919/bio/deseq2/plotMA"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.



Notes
-----

Parameters:

* alpha_threshold: The padj threshold used to classify




Authors
-------


* Thibault Dayris



Code
----

.. code-block:: R

    #!/usr/bin/R

    # This script takes a deseq2 dataset object and performs
    # a mean average plot

    # __author__ = "Thibault Dayris"
    # __copyright__ = "Copyright 2020, Thibault Dayris"
    # __email__ = "thibault.dayris@gustaveroussy.fr"
    # __license__ = "MIT"

    # Differential Gene expression
    base::library(package = "DESeq2", quietly = TRUE);
    # Graphic library
    base::library(package = "Cairo", quietly = TRUE);

    # Load tsv file
    res <- utils::read.table(
      file = snakemake@input[["res"]],
      sep = "\t",
      stringsAsFactors = FALSE
    );

    alpha_threshold <- 0.05;
    if ("alpha_threshold" %in% names(snakemake@params)) {
      alpha_threshold <- base::as.numeric(
        x = snakemake@params[["alpha_threshold"]]
      );
    }

    res$Sig <- res$padj < alpha_threshold;
    res <- res[, c("baseMean", "log2FoldChange", "Sig")];

    # Build extra parameters for DESeq2 plotMA
    extra <- "res";
    if ("extra" %in% snakemake@params) {
      extra <- base::paste(
        extra,
        base::as.character(x = snakemake@params[["extra"]]),
        sep = ", "
      );
    }

    command <- base::paste0(
      "DESeq2::plotMA(",
      extra,
      ");"
    );

    base::message(command);

    # Build plot
    png(
      filename = snakemake@output[["png"]],
      width = 1024,
      height = 768,
      units = "px",
      type = "cairo"
    );

    base::eval(
      base::parse(
        text = command
      )
    );

    dev.off();
