.. _`picard CollectHSMetrics`:

PICARD COLLECTHSMETRICS
=======================

Collects hybrid-selection (HS) metrics for a SAM or BAM file using picard.




Software dependencies
---------------------


* picard ==2.22.1




Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule picard_collect_hs_metrics:
        input:
            bam="mapped/{sample}.bam",
            reference="genome.fasta",
            # Baits and targets should be given as interval lists. These can
            # be generated from bed files using picard BedToIntervalList.
            bait_intervals="regions.intervals",
            target_intervals="regions.intervals"
        output:
            "stats/hs_metrics/{sample}.txt"
        params:
            # Optional extra arguments. Here we reduce sample size
            # to reduce the runtime in our unit test.
            extra="SAMPLE_SIZE=1000"
        log:
            "logs/picard_collect_hs_metrics/{sample}.log"
        wrapper:
            "0.64.0-178-g55324f95/bio/picard/collecthsmetrics"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.




Authors
-------


* Julian de Ruiter



Code
----

.. code-block:: python

    """Snakemake wrapper for picard CollectHSMetrics."""

    __author__ = "Julian de Ruiter"
    __copyright__ = "Copyright 2017, Julian de Ruiter"
    __email__ = "julianderuiter@gmail.com"
    __license__ = "MIT"


    from snakemake.shell import shell


    inputs = " ".join("INPUT={}".format(in_) for in_ in snakemake.input)
    extra = snakemake.params.get("extra", "")
    log = snakemake.log_fmt_shell(stdout=False, stderr=True)

    shell(
        "picard CollectHsMetrics"
        " {extra}"
        " INPUT={snakemake.input.bam}"
        " OUTPUT={snakemake.output[0]}"
        " REFERENCE_SEQUENCE={snakemake.input.reference}"
        " BAIT_INTERVALS={snakemake.input.bait_intervals}"
        " TARGET_INTERVALS={snakemake.input.target_intervals}"
        " {log}"
    )
