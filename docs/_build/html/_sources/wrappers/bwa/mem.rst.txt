.. _`bwa mem`:

BWA MEM
=======

Map reads using bwa mem, with optional sorting using samtools or picard.



Software dependencies
---------------------


* bwa ==0.7.17

* samtools ==1.9

* picard ==2.20.1




Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule bwa_mem:
        input:
            reads=["reads/{sample}.1.fastq", "reads/{sample}.2.fastq"]
        output:
            "mapped/{sample}.bam"
        log:
            "logs/bwa_mem/{sample}.log"
        params:
            index="genome",
            extra=r"-R '@RG\tID:{sample}\tSM:{sample}'",
            sort="none",             # Can be 'none', 'samtools' or 'picard'.
            sort_order="queryname",  # Can be 'queryname' or 'coordinate'.
            sort_extra=""            # Extra args for samtools/picard.
        threads: 8
        wrapper:
            "0.66.0-321-g890d65f7/bio/bwa/mem"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.




Authors
-------


* Johannes Köster

* Julian de Ruiter



Code
----

.. code-block:: python

    __author__ = "Johannes Köster, Julian de Ruiter"
    __copyright__ = "Copyright 2016, Johannes Köster and Julian de Ruiter"
    __email__ = "koester@jimmy.harvard.edu, julianderuiter@gmail.com"
    __license__ = "MIT"


    from os import path

    from snakemake.shell import shell


    # Extract arguments.
    extra = snakemake.params.get("extra", "")

    sort = snakemake.params.get("sort", "none")
    sort_order = snakemake.params.get("sort_order", "coordinate")
    sort_extra = snakemake.params.get("sort_extra", "")

    log = snakemake.log_fmt_shell(stdout=False, stderr=True)

    # Check inputs/arguments.
    if not isinstance(snakemake.input.reads, str) and len(snakemake.input.reads) not in {
        1,
        2,
    }:
        raise ValueError("input must have 1 (single-end) or " "2 (paired-end) elements")

    if sort_order not in {"coordinate", "queryname"}:
        raise ValueError("Unexpected value for sort_order ({})".format(sort_order))

    # Determine which pipe command to use for converting to bam or sorting.
    if sort == "none":

        # Simply convert to bam using samtools view.
        pipe_cmd = "samtools view -Sbh -o {snakemake.output[0]} -"

    elif sort == "samtools":

        # Sort alignments using samtools sort.
        pipe_cmd = "samtools sort {sort_extra} -o {snakemake.output[0]} -"

        # Add name flag if needed.
        if sort_order == "queryname":
            sort_extra += " -n"

        prefix = path.splitext(snakemake.output[0])[0]
        sort_extra += " -T " + prefix + ".tmp"

    elif sort == "picard":

        # Sort alignments using picard SortSam.
        pipe_cmd = (
            "picard SortSam {sort_extra} INPUT=/dev/stdin"
            " OUTPUT={snakemake.output[0]} SORT_ORDER={sort_order}"
        )

    else:
        raise ValueError("Unexpected value for params.sort ({})".format(sort))

    shell(
        "(bwa mem"
        " -t {snakemake.threads}"
        " {extra}"
        " {snakemake.params.index}"
        " {snakemake.input.reads}"
        " | " + pipe_cmd + ") {log}"
    )
