.. _`bwa mem samblaster`:

BWA MEM SAMBLASTER
==================

Map reads using bwa-mem2, mark duplicates by samblaster and sort and index by sambamba.


Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule bwa_mem:
        input:
            reads=["reads/{sample}.1.fastq", "reads/{sample}.2.fastq"]
        output:
            bam="mapped/{sample}.bam",
            index="mapped/{sample}.bam.bai"
        log:
            "logs/bwa_mem2_sambamba/{sample}.log"
        params:
            index="genome.fasta",
            extra=r"-R '@RG\tID:{sample}\tSM:{sample}'",
            sort_extra="-q" # Extra args for sambamba.
        threads: 8
        wrapper:
            "0.67.0-345-g15e007be/bio/bwa-mem2/mem-samblaster"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``bwa-mem2==2.0``
* ``sambamba==0.7.1``
* ``samblaster==0.1.24``




Authors
-------

* Christopher Schröder


Code
----

.. code-block:: python

    __author__ = "Christopher Schröder"
    __copyright__ = "Copyright 2020, Christopher Schröder"
    __email__ = "christopher.schroeder@tu-dortmund.de"
    __license__ = "MIT"


    from os import path

    from snakemake.shell import shell


    # Extract arguments.
    extra = snakemake.params.get("extra", "")
    sort_extra = snakemake.params.get("sort_extra", "")
    samblaster_extra = snakemake.params.get("samblaster_extra", "")

    log = snakemake.log_fmt_shell(stdout=False, stderr=True)

    # Check inputs/arguments.
    if not isinstance(snakemake.input.reads, str) and len(snakemake.input.reads) not in {
        1,
        2,
    }:
        raise ValueError("input must have 1 (single-end) or 2 (paired-end) elements")

    shell(
        "(bwa-mem2 mem"
        " -t {snakemake.threads}"
        " {extra}"
        " {snakemake.params.index}"
        " {snakemake.input.reads}"
        " | samblaster"
        " {samblaster_extra}"
        " | sambamba view -S -f bam /dev/stdin"
        " -t {snakemake.threads}"
        " | sambamba sort /dev/stdin"
        " -t {snakemake.threads}"
        " -o {snakemake.output.bam}"
        " {sort_extra}"
        ") {log}"
    )
