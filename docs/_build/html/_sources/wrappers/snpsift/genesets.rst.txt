.. _`SnpSift Genes Sets`:

SNPSIFT GENES SETS
==================

Annotate using GMT genes sets.



Software dependencies
---------------------


* snpsift ==4.3.1t

* bcftools ==1.10.2




Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_snpsift_gmt:
        input:
            call = "in.vcf",
            gmt = "fake_set.gmt"
        output:
            call = "annotated/out.vcf"
        wrapper:
            "0.66.0-307-g1ea269e8/bio/snpsift/genesets"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.




Authors
-------


* Thibault Dayris



Code
----

.. code-block:: python

    """Snakemake wrapper for SnpSift geneSets"""

    __author__ = "Thibault Dayris"
    __copyright__ = "Copyright 2020, Dayris Thibault"
    __email__ = "thibault.dayris@gustaveroussy.fr"
    __license__ = "MIT"

    from snakemake.shell import shell

    log = snakemake.log_fmt_shell(stdout=False, stderr=True)
    extra = snakemake.params.get("extra", "")
    min_threads = 1

    # Uncompression shall be done according to user-defined input
    incall = snakemake.input["call"]
    if snakemake.input["call"].endswith("bcf"):
        min_threads += 1
        incall = "< <(bcftools view {})".format(incall)
    elif snakemake.input["call"].endswith("gz"):
        min_threads += 1
        incall = "< <(gunzip -c {})".format(incall)

    # Compression shall be done according to user-defined output
    outcall = snakemake.output["call"]
    if snakemake.output["call"].endswith("gz"):
        min_threads += 1
        outcall = "| gzip -c > {}".format(outcall)
    elif snakemake.output["call"].endswith("bcf"):
        min_threads += 1
        outcall = "| bcftools view > {}".format(outcall)
    else:
        outcall = "> {}".format(outcall)

    # Each (un)compression step raises the threads requirements
    if snakemake.threads < min_threads:
        raise ValueError(
            "At least {} threads required, {} provided".format(
                min_threads, snakemake.threads
            )
        )


    if "mem_mb" in snakemake.resources.keys():
        extra += "-Xmx{}M".format(snakemake.resources["mem_mb"])


    shell(
        "SnpSift geneSets"  # Tool and its subcommand
        " {extra}"  # Extra parameters
        " {snakemake.input.gmt}"  # Path to annotation vcf file
        " {incall}"  # Path to input vcf file
        " {outcall}"  # Path to output vcf file
        " {log}"  # Logging behaviour
    )
