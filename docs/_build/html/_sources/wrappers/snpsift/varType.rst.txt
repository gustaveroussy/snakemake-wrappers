.. _`bio/snpsift/varType`:

SNPSIFT VARTYPE
===============

Add an INFO field denoting variant type with `SnpSift <https://pcingola.github.io/SnpEff/ss_varianttype/>`_


Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_snpsift_vartype:
        input:
            vcf="in.vcf"
        output:
            vcf="annotated/out.vcf"
        message:
            "Testing SnpSift varType"
        # optional specification of memory usage of the JVM that snakemake will respect with global
        # resource restrictions (https://snakemake.readthedocs.io/en/latest/snakefiles/rules.html#resources)
        # and which can be used to request RAM during cluster job submission as `{resources.mem_mb}`:
        # https://snakemake.readthedocs.io/en/latest/executing/cluster.html#job-properties
        resources:
            mem_mb=1024
        log:
            "varType.log"
        wrapper:
            "0.72.0-512-gb940f0d55/bio/snpsift/varType"

Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``snpsift=4.3.1t``
* ``snakemake-wrapper-utils==0.1.3``

Input/Output
------------
**Input:**

* A VCF-formatted file

**Output:**

* A VCF-formatted file




Authors
-------

* Thibault Dayris


Code
----

.. code-block:: python

    """Snakemake wrapper for SnpSift varType"""

    __author__ = "Thibault Dayris"
    __copyright__ = "Copyright 2020, Dayris Thibault"
    __email__ = "thibault.dayris@gustaveroussy.fr"
    __license__ = "MIT"

    from snakemake.shell import shell
    from snakemake_wrapper_utils.java import get_java_opts

    java_opts = get_java_opts(snakemake)
    log = snakemake.log_fmt_shell(stdout=False, stderr=True)
    extra = snakemake.params.get("extra", "")

    shell(
        "SnpSift varType"  # Tool and its subcommand
        " {java_opts} {extra}"  # Extra parameters
        " {snakemake.input.vcf}"  # Path to input vcf file
        " > {snakemake.output.vcf}"  # Path to output vcf file
        " {log}"  # Logging behaviour
    )
