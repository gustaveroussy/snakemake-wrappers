.. _`SnpSift dnNSFP`:

SNPSIFT DNNSFP
==============

Annotate using integrated annotation from dbNSFP.



Software dependencies
---------------------


* bioconda:snpsift=4.3.1t




Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_snpsift_dbnsfp:
        input:
            vcf = "in.vcf",
            dbNSFP = "dbNSFP.txt.gz"
        output:
            vcf = "annotated/out.vcf"
        log:
            "annotate.log"
        wrapper:
            "0.60.1-133-gf773a3b9/bio/snpsift/dbnsfp"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.




Authors
-------


* Thibault Dayris



Code
----

.. code-block:: python

    """Snakemake wrapper for SnpSift dbNSFP"""

    __author__ = "Thibault Dayris"
    __copyright__ = "Copyright 2020, Dayris Thibault"
    __email__ = "thibault.dayris@gustaveroussy.fr"
    __license__ = "MIT"

    from os.path import dirname
    from snakemake.shell import shell
    from snakemake.utils import makedirs

    log = snakemake.log_fmt_shell(stdout=False, stderr=True)

    extra = snakemake.params.get("extra", "")
    makedirs(dirname(snakemake.output.vcf))

    db = snakemake.input.get("dbNSFP", "")
    if db != "":
        db = "-db {}".format(db)

    shell(
        "SnpSift dbnsfp"  # Tool and its subcommand
        " {extra}"  # Extra parameters
        " {db}"  # Path to annotation vcf file
        " -v {snakemake.input.vcf}"  # Path to input vcf file
        " > {snakemake.output.vcf}"  # Path to output vcf file
        " {log}"  # Logging behaviour
    )
