.. _`bio/snpsift/extractfields`:

SNPSIFT EXTRACT FIELDS
======================

Convert from VCF to TSV with `SnpSift <https://pcingola.github.io/SnpEff/ss_extractfields/>`_


Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_snpsift_extractfields:
        input:
            call = "in.vcf"
        output:
            call = "extracted/out.tsv"
        # optional specification of memory usage of the JVM that snakemake will respect with global
        # resource restrictions (https://snakemake.readthedocs.io/en/latest/snakefiles/rules.html#resources)
        # and which can be used to request RAM during cluster job submission as `{resources.mem_mb}`:
        # https://snakemake.readthedocs.io/en/latest/executing/cluster.html#job-properties
        resources:
            mem_mb=1024
        params:
            fields = ["GT"]
        wrapper:
            "0.72.0-558-g97f44f15f/bio/snpsift/extractfields"

Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``snpsift==4.3.1t``
* ``bcftools==1.10.2``
* ``snakemake-wrapper-utils==0.1.3``

Input/Output
------------
**Input:**

* VCF/BCF, gzipped or not, that are to be formatted

**Output:**

* TSV-formatted extracted fields




Authors
-------

* Thibault Dayris


Code
----

.. code-block:: python

    """Snakemake wrapper for SnpSift geneSets"""

    __author__ = "Thibault Dayris"
    __copyright__ = "Copyright 2020, Dayris Thibault"
    __email__ = "thibault.dayris@gustaveroussy.fr"
    __license__ = "MIT"

    from snakemake.shell import shell
    from snakemake_wrapper_utils.java import get_java_opts

    java_opts = get_java_opts(snakemake)

    log = snakemake.log_fmt_shell(stdout=False, stderr=True)
    extra = snakemake.params.get("extra", "")
    min_threads = 1

    # Uncompression shall be done according to user-defined input
    incall = snakemake.input["call"]
    if snakemake.input["call"].endswith("bcf"):
        min_threads += 1
        incall = "< <(bcftools view {})".format(incall)
    elif snakemake.input["call"].endswith("gz"):
        min_threads += 1
        incall = "< <(gunzip -c {})".format(incall)

    # Compression shall be done according to user-defined output
    outcall = snakemake.output["call"]
    if snakemake.output["call"].endswith("gz"):
        min_threads += 1
        outcall = "| gzip -c > {}".format(outcall)
    elif snakemake.output["call"].endswith("bcf"):
        min_threads += 1
        outcall = "| bcftools view > {}".format(outcall)
    else:
        outcall = "> {}".format(outcall)

    # Each (un)compression step raises the threads requirements
    if snakemake.threads < min_threads:
        raise ValueError(
            "At least {} threads required, {} provided".format(
                min_threads, snakemake.threads
            )
        )

    fields = snakemake.params["fields"]
    if isinstance(fields, list):
        fields = " ".join(fields)

    shell(
        "SnpSift extractFields"  # Tool and its subcommand
        " {java_opts} {extra}"  # Extra parameters
        " {incall}"  # Path to input vcf file
        " {fields}"  # The fields to extract
        " {outcall}"  # Path to output file
        " {log}"  # Logging behaviour
    )
