.. _`SnpSift GWAS Catalog`:

SNPSIFT GWAS CATALOG
====================

Annotate using GWAS catalog.



Software dependencies
---------------------


* bioconda:snpsift=4.3.1t




Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule test_snpsift_gwascat:
        input:
            vcf = "in.vcf",
            gwascat = "gwascatalog.txt"
        output:
            vcf = "annotated/out.vcf"
        message:
            "Testing SnpSift GWAS catalog annotation"
        log:
            "annotate.log"
        wrapper:
            "0.66.0-304-gaabdcb22/bio/snpsift/gwasCat"


Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.




Authors
-------


* Thibault Dayris



Code
----

.. code-block:: python

    """Snakemake wrapper for SnpSift gwasCat"""

    __author__ = "Thibault Dayris"
    __copyright__ = "Copyright 2020, Dayris Thibault"
    __email__ = "thibault.dayris@gustaveroussy.fr"
    __license__ = "MIT"

    from os.path import dirname
    from snakemake.shell import shell
    from snakemake.utils import makedirs

    log = snakemake.log_fmt_shell(stdout=False, stderr=True)

    extra = snakemake.params.get("extra", "")
    makedirs(dirname(snakemake.output.vcf))


    if "mem_mb" in snakemake.resources.keys():
        extra += "-Xmx{}M".format(snakemake.resources["mem_mb"])

    shell(
        "SnpSift gwasCat"  # Tool and its subcommand
        " {extra}"  # Extra parameters
        " -db {snakemake.input.gwascat}"  # Path to annotation vcf file
        " {snakemake.input.vcf}"  # Path to input vcf file
        " > {snakemake.output.vcf}"  # Path to output vcf file
        " {log}"  # Logging behaviour
    )
