.. _`bio/sra-tools/fasterq-dump`:

SRA-TOOLS FASTERQ-DUMP
======================

Download FASTQ files from SRA.


Example
-------

This wrapper can be used in the following way:

.. code-block:: python

    rule get_fastq_pe:
        output:
            # the wildcard name must be accession, pointing to an SRA number
            "data/{accession}_1.fastq",
            "data/{accession}_2.fastq"
        params:
            # optional extra arguments
            extra=""
        threads: 6  # defaults to 6
        wrapper:
            "0.71.1-427-gbdc7a8d34/bio/sra-tools/fasterq-dump"


    rule get_fastq_se:
        output:
            "data/{accession}.fastq"
        params:
            extra=""
        threads: 6
        wrapper:
            "0.71.1-427-gbdc7a8d34/bio/sra-tools/fasterq-dump"

Note that input, output and log file paths can be chosen freely.
When running with

.. code-block:: bash

    snakemake --use-conda

the software dependencies will be automatically deployed into an isolated environment before execution.

Software dependencies
---------------------

* ``sra-tools>2.9.1``




Authors
-------

* Johannes Köster
* Derek Croote


Code
----

.. code-block:: python

    __author__ = "Johannes Köster, Derek Croote"
    __copyright__ = "Copyright 2020, Johannes Köster"
    __email__ = "johannes.koester@uni-due.de"
    __license__ = "MIT"

    import os
    import tempfile
    from snakemake.shell import shell

    log = snakemake.log_fmt_shell(stdout=True, stderr=True)

    outdir = os.path.dirname(snakemake.output[0])
    if outdir:
        outdir = "--outdir {}".format(outdir)

    extra = snakemake.params.get("extra", "")

    with tempfile.TemporaryDirectory() as tmp:
        shell(
            "fasterq-dump --temp {tmp} --threads {snakemake.threads} "
            "{extra} {outdir} {snakemake.wildcards.accession} {log}"
        )
